/*! For license information please see main.js.LICENSE.txt */
(()=>{var e={849:(e,t,n)=>{"use strict";n.d(t,{Z:()=>p});var r=n(559),i=n.n(r),o=n(476),s=n.n(o),a=n(615),l=n(660),u=n(845),c=n(700),d=s()(i());d.i(a.Z),d.i(l.Z),d.i(u.Z),d.i(c.Z),d.push([e.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const p=d},466:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(559),i=n.n(r),o=n(476),s=n.n(o)()(i());s.push([e.id,'.ng-slider__slider-track{position:absolute;height:5px;border-radius:5px;background-color:red}.ng-slider__slider-track_vertical{width:5px;height:0}.ng-slider__slider-wrapper{position:relative;width:100%;height:3px}.ng-slider{width:80%;height:5px;background-color:#d5d5d5;position:relative}.ng-slider_vertical{width:5px;height:80%}.ng-slider__handle{touch-action:none;position:absolute;width:15px;height:15px;border-radius:50%;background-color:#9acd32;top:-5px;cursor:pointer}.ng-slider__handle_vertical{left:-5px}.ng-slider__values{position:absolute;width:100%;height:10px;margin-top:15px}.ng-slider__values_vertical{width:10px;height:100%;flex-direction:column;margin-top:0;position:absolute;right:30px}.ng-slider__value{position:absolute;background-color:#fff;border:none;cursor:pointer;padding:0;font-family:"Courier New",Courier,monospace;font-size:12px;text-align:center}.ng-slider__current-value{min-width:120%;width:max-content;height:max-content;bottom:17px;right:-4px;border:1px solid #000;border-bottom-left-radius:50%;border-bottom-right-radius:50%;font-size:12px;text-align:center;position:absolute}.ng-slider__current-value_vertical{bottom:0;left:20px}',"",{version:3,sources:["webpack://./plugin/slider.scss"],names:[],mappings:"AAAA,yBACI,iBAAA,CACA,UAAA,CACA,iBAAA,CACA,oBAAA,CACA,kCACI,SAAA,CACA,QAAA,CAIR,2BACI,iBAAA,CACA,UAAA,CACA,UAAA,CAGJ,WACI,SAAA,CACA,UAAA,CACA,wBAAA,CACA,iBAAA,CACA,oBACI,SAAA,CACA,UAAA,CAIR,mBACI,iBAAA,CACA,iBAAA,CACA,UAAA,CACA,WAAA,CACA,iBAAA,CACA,wBAAA,CACA,QAAA,CACA,cAAA,CACA,4BACI,SAAA,CAIR,mBACI,iBAAA,CACA,UAAA,CACA,WAAA,CACA,eAAA,CACA,4BACI,UAAA,CACA,WAAA,CACA,qBAAA,CACA,YAAA,CACA,iBAAA,CACA,UAAA,CAIR,kBACI,iBAAA,CACA,qBAAA,CACA,WAAA,CACA,cAAA,CACA,SAAA,CACA,2CAAA,CACA,cAAA,CACA,iBAAA,CAGJ,0BACI,cAAA,CACA,iBAAA,CACA,kBAAA,CACA,WAAA,CACA,UAAA,CACA,qBAAA,CACA,6BAAA,CACA,8BAAA,CACA,cAAA,CACA,iBAAA,CACA,iBAAA,CAEA,mCACI,QAAA,CACA,SAAA",sourcesContent:[".ng-slider__slider-track {\r\n    position: absolute;\r\n    height: 5px;\r\n    border-radius: 5px;\r\n    background-color: red;\r\n    &_vertical {\r\n        width: 5px;\r\n        height: 0;\r\n    }\r\n}\r\n\r\n.ng-slider__slider-wrapper {\r\n    position: relative;\r\n    width: 100%;\r\n    height: 3px;\r\n}\r\n\r\n.ng-slider {\r\n    width: 80%;\r\n    height: 5px;\r\n    background-color: #d5d5d5;\r\n    position: relative;\r\n    &_vertical {\r\n        width: 5px;\r\n        height: 80%;\r\n    }\r\n}\r\n\r\n.ng-slider__handle {\r\n    touch-action: none;\r\n    position: absolute;\r\n    width: 15px;\r\n    height: 15px;\r\n    border-radius: 50%;\r\n    background-color: yellowgreen;\r\n    top: -5px;\r\n    cursor: pointer;\r\n    &_vertical {\r\n        left: -5px;\r\n    }\r\n}\r\n\r\n.ng-slider__values {\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 10px;\r\n    margin-top: 15px;\r\n    &_vertical {\r\n        width: 10px;\r\n        height: 100%;\r\n        flex-direction: column;\r\n        margin-top: 0;\r\n        position: absolute;\r\n        right: 30px;\r\n    }\r\n}\r\n\r\n.ng-slider__value {\r\n    position: absolute;\r\n    background-color: white;\r\n    border: none;\r\n    cursor: pointer;\r\n    padding: 0;\r\n    font-family: 'Courier New', Courier, monospace;\r\n    font-size: 12px;\r\n    text-align: center;\r\n}\r\n\r\n.ng-slider__current-value {\r\n    min-width: 120%;\r\n    width: max-content;\r\n    height: max-content;\r\n    bottom: 17px;\r\n    right: -4px;\r\n    border: 1px solid black;\r\n    border-bottom-left-radius: 50%;\r\n    border-bottom-right-radius: 50%;\r\n    font-size: 12px;\r\n    text-align: center;\r\n    position: absolute;\r\n\r\n    &_vertical {\r\n        bottom: 0;\r\n        left: 20px;\r\n    }\r\n}"],sourceRoot:""}]);const a=s},660:(e,t,n)=>{"use strict";n.d(t,{Z:()=>f});var r=n(559),i=n.n(r),o=n(476),s=n.n(o),a=n(53),l=n(40),u=n(850),c=n(731),d=n(231),p=s()(i());p.i(a.Z),p.i(l.Z),p.i(u.Z),p.i(c.Z),p.i(d.Z),p.push([e.id,".config {\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n}","",{version:3,sources:["webpack://./demo-page/blocks/config/config.scss"],names:[],mappings:"AAMA;IACI,WAAW;IACX,aAAa;IACb,sBAAsB;AAC1B",sourcesContent:["@import url('./config__button.scss');\r\n@import url('./config__error.scss');\r\n@import url('./config__input.scss');\r\n@import url('./config__item.scss');\r\n@import url('./config__text.scss');\r\n\r\n.config {\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n}"],sourceRoot:""}]);const f=p},53:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(559),i=n.n(r),o=n(476),s=n.n(o)()(i());s.push([e.id,".config__button {\r\n    display: block;\r\n    margin: auto;\r\n    width: 50px;\r\n    margin-left: 0;\r\n}","",{version:3,sources:["webpack://./demo-page/blocks/config/config__button.scss"],names:[],mappings:"AAAA;IACI,cAAc;IACd,YAAY;IACZ,WAAW;IACX,cAAc;AAClB",sourcesContent:[".config__button {\r\n    display: block;\r\n    margin: auto;\r\n    width: 50px;\r\n    margin-left: 0;\r\n}"],sourceRoot:""}]);const a=s},40:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(559),i=n.n(r),o=n(476),s=n.n(o)()(i());s.push([e.id,".config__error {\r\n    font-size: 12px;\r\n    background-color: red;\r\n    height: 200%;\r\n    color: white;\r\n    border-radius: 15%;\r\n    border-top-left-radius: 0;\r\n    position: absolute;\r\n    left: 60%;\r\n    text-align: center;\r\n}","",{version:3,sources:["webpack://./demo-page/blocks/config/config__error.scss"],names:[],mappings:"AAAA;IACI,eAAe;IACf,qBAAqB;IACrB,YAAY;IACZ,YAAY;IACZ,kBAAkB;IAClB,yBAAyB;IACzB,kBAAkB;IAClB,SAAS;IACT,kBAAkB;AACtB",sourcesContent:[".config__error {\r\n    font-size: 12px;\r\n    background-color: red;\r\n    height: 200%;\r\n    color: white;\r\n    border-radius: 15%;\r\n    border-top-left-radius: 0;\r\n    position: absolute;\r\n    left: 60%;\r\n    text-align: center;\r\n}"],sourceRoot:""}]);const a=s},850:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(559),i=n.n(r),o=n(476),s=n.n(o)()(i());s.push([e.id,".config__input {\r\n    display: block;\r\n    width: 30px;\r\n    font-size: 12px;\r\n    margin: auto;\r\n    margin-left: 0;\r\n}","",{version:3,sources:["webpack://./demo-page/blocks/config/config__input.scss"],names:[],mappings:"AAAA;IACI,cAAc;IACd,WAAW;IACX,eAAe;IACf,YAAY;IACZ,cAAc;AAClB",sourcesContent:[".config__input {\r\n    display: block;\r\n    width: 30px;\r\n    font-size: 12px;\r\n    margin: auto;\r\n    margin-left: 0;\r\n}"],sourceRoot:""}]);const a=s},731:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(559),i=n.n(r),o=n(476),s=n.n(o)()(i());s.push([e.id,".config__item {\r\n    display: flex;\r\n    position: relative;\r\n}","",{version:3,sources:["webpack://./demo-page/blocks/config/config__item.scss"],names:[],mappings:"AAAA;IACI,aAAa;IACb,kBAAkB;AACtB",sourcesContent:[".config__item {\r\n    display: flex;\r\n    position: relative;\r\n}"],sourceRoot:""}]);const a=s},231:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(559),i=n.n(r),o=n(476),s=n.n(o)()(i());s.push([e.id,".config__text {\r\n    font-size: 12px;\r\n    margin-left: 5%;\r\n    width: 40%;\r\n}","",{version:3,sources:["webpack://./demo-page/blocks/config/config__text.scss"],names:[],mappings:"AAAA;IACI,eAAe;IACf,eAAe;IACf,UAAU;AACd",sourcesContent:[".config__text {\r\n    font-size: 12px;\r\n    margin-left: 5%;\r\n    width: 40%;\r\n}"],sourceRoot:""}]);const a=s},845:(e,t,n)=>{"use strict";n.d(t,{Z:()=>d});var r=n(559),i=n.n(r),o=n(476),s=n.n(o),a=n(446),l=n(96),u=n(13),c=s()(i());c.i(a.Z),c.i(l.Z),c.i(u.Z),c.push([e.id,".demo-page {\r\n    font-family: Arial, Helvetica, sans-serif;\r\n    max-width: 1400px;\r\n    width: 100%;\r\n    height: 70rem;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n}","",{version:3,sources:["webpack://./demo-page/blocks/demo-page/demo-page.scss"],names:[],mappings:"AAIA;IACI,yCAAyC;IACzC,iBAAiB;IACjB,WAAW;IACX,aAAa;IACb,aAAa;IACb,sBAAsB;IACtB,mBAAmB;AACvB",sourcesContent:["@import url('./demo-page__column.scss');\r\n@import url('./demo-page__title.scss');\r\n@import url('./demo-page__sliders.scss');\r\n\r\n.demo-page {\r\n    font-family: Arial, Helvetica, sans-serif;\r\n    max-width: 1400px;\r\n    width: 100%;\r\n    height: 70rem;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n}"],sourceRoot:""}]);const d=c},446:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(559),i=n.n(r),o=n(476),s=n.n(o)()(i());s.push([e.id,".demo-page__column {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    width: 100%;\r\n    height: 50%;\r\n}","",{version:3,sources:["webpack://./demo-page/blocks/demo-page/demo-page__column.scss"],names:[],mappings:"AAAA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,WAAW;IACX,WAAW;AACf",sourcesContent:[".demo-page__column {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    width: 100%;\r\n    height: 50%;\r\n}"],sourceRoot:""}]);const a=s},13:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(559),i=n.n(r),o=n(476),s=n.n(o)()(i());s.push([e.id,".demo-page__sliders {\r\n    display: flex;\r\n    width: 100%;\r\n    height: 100%;\r\n}","",{version:3,sources:["webpack://./demo-page/blocks/demo-page/demo-page__sliders.scss"],names:[],mappings:"AAAA;IACI,aAAa;IACb,WAAW;IACX,YAAY;AAChB",sourcesContent:[".demo-page__sliders {\r\n    display: flex;\r\n    width: 100%;\r\n    height: 100%;\r\n}"],sourceRoot:""}]);const a=s},96:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(559),i=n.n(r),o=n(476),s=n.n(o)()(i());s.push([e.id,".demo-page__title {\r\n    text-align: center;\r\n}","",{version:3,sources:["webpack://./demo-page/blocks/demo-page/demo-page__title.scss"],names:[],mappings:"AAAA;IACI,kBAAkB;AACtB",sourcesContent:[".demo-page__title {\r\n    text-align: center;\r\n}"],sourceRoot:""}]);const a=s},615:(e,t,n)=>{"use strict";n.d(t,{Z:()=>c});var r=n(559),i=n.n(r),o=n(476),s=n.n(o),a=n(218),l=n(972),u=s()(i());u.i(a.Z),u.i(l.Z),u.push([e.id,".slider-panel {\r\n    display: flex;\r\n    flex-direction: column;\r\n    border: 1px solid grey;\r\n    border-radius: 5px;\r\n    width: 70%;\r\n    height: 90%;\r\n}","",{version:3,sources:["webpack://./demo-page/blocks/slider-panel/slider-panel.scss"],names:[],mappings:"AAGA;IACI,aAAa;IACb,sBAAsB;IACtB,sBAAsB;IACtB,kBAAkB;IAClB,UAAU;IACV,WAAW;AACf",sourcesContent:["@import url('./slider-panel__panel.scss');\r\n@import url('./slider-panel_margin-top_10per.scss');\r\n\r\n.slider-panel {\r\n    display: flex;\r\n    flex-direction: column;\r\n    border: 1px solid grey;\r\n    border-radius: 5px;\r\n    width: 70%;\r\n    height: 90%;\r\n}"],sourceRoot:""}]);const c=u},218:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(559),i=n.n(r),o=n(476),s=n.n(o)()(i());s.push([e.id,".slider-panel__panel {\r\n    width: 100%;\r\n    height: 10rem;\r\n}","",{version:3,sources:["webpack://./demo-page/blocks/slider-panel/slider-panel__panel.scss"],names:[],mappings:"AAAA;IACI,WAAW;IACX,aAAa;AACjB",sourcesContent:[".slider-panel__panel {\r\n    width: 100%;\r\n    height: 10rem;\r\n}"],sourceRoot:""}]);const a=s},972:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(559),i=n.n(r),o=n(476),s=n.n(o)()(i());s.push([e.id,".slider-panel_margin-top_10per {\r\n    margin-top: 10%;\r\n}","",{version:3,sources:["webpack://./demo-page/blocks/slider-panel/slider-panel_margin-top_10per.scss"],names:[],mappings:"AAAA;IACI,eAAe;AACnB",sourcesContent:[".slider-panel_margin-top_10per {\r\n    margin-top: 10%;\r\n}"],sourceRoot:""}]);const a=s},700:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(559),i=n.n(r),o=n(476),s=n.n(o)()(i());s.push([e.id,".slider {\r\n    width: 100%;\r\n    height: 100px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}","",{version:3,sources:["webpack://./demo-page/blocks/slider/slider.scss"],names:[],mappings:"AAAA;IACI,WAAW;IACX,aAAa;IACb,aAAa;IACb,mBAAmB;IACnB,uBAAuB;AAC3B",sourcesContent:[".slider {\r\n    width: 100%;\r\n    height: 100px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}"],sourceRoot:""}]);const a=s},476:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,i,o){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(r)for(var a=0;a<this.length;a++){var l=this[a][0];null!=l&&(s[l]=!0)}for(var u=0;u<e.length;u++){var c=[].concat(e[u]);r&&s[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),i&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=i):c[4]="".concat(i)),t.push(c))}},t}},559:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */"),s=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(s).concat([o]).join("\n")}return[t].join("\n")}},638:function(e,t){var n;!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,(function(r,i){"use strict";var o=[],s=Object.getPrototypeOf,a=o.slice,l=o.flat?function(e){return o.flat.call(e)}:function(e){return o.concat.apply([],e)},u=o.push,c=o.indexOf,d={},p=d.toString,f=d.hasOwnProperty,h=f.toString,g=h.call(Object),m={},v=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType&&"function"!=typeof e.item},y=function(e){return null!=e&&e===e.window},A=r.document,b={type:!0,src:!0,nonce:!0,noModule:!0};function x(e,t,n){var r,i,o=(n=n||A).createElement("script");if(o.text=e,t)for(r in b)(i=t[r]||t.getAttribute&&t.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function C(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?d[p.call(e)]||"object":typeof e}var w="3.6.0",T=function(e,t){return new T.fn.init(e,t)};function k(e){var t=!!e&&"length"in e&&e.length,n=C(e);return!v(e)&&!y(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}T.fn=T.prototype={jquery:w,constructor:T,length:0,toArray:function(){return a.call(this)},get:function(e){return null==e?a.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=T.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return T.each(this,e)},map:function(e){return this.pushStack(T.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(T.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(T.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:u,sort:o.sort,splice:o.splice},T.extend=T.fn.extend=function(){var e,t,n,r,i,o,s=arguments[0]||{},a=1,l=arguments.length,u=!1;for("boolean"==typeof s&&(u=s,s=arguments[a]||{},a++),"object"==typeof s||v(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(e=arguments[a]))for(t in e)r=e[t],"__proto__"!==t&&s!==r&&(u&&r&&(T.isPlainObject(r)||(i=Array.isArray(r)))?(n=s[t],o=i&&!Array.isArray(n)?[]:i||T.isPlainObject(n)?n:{},i=!1,s[t]=T.extend(u,o,r)):void 0!==r&&(s[t]=r));return s},T.extend({expando:"jQuery"+(w+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==p.call(e)||(t=s(e))&&("function"!=typeof(n=f.call(t,"constructor")&&t.constructor)||h.call(n)!==g))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){x(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,r=0;if(k(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(k(Object(e))?T.merge(n,"string"==typeof e?[e]:e):u.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:c.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,s=!n;i<o;i++)!t(e[i],i)!==s&&r.push(e[i]);return r},map:function(e,t,n){var r,i,o=0,s=[];if(k(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&s.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&s.push(i);return l(s)},guid:1,support:m}),"function"==typeof Symbol&&(T.fn[Symbol.iterator]=o[Symbol.iterator]),T.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){d["[object "+t+"]"]=t.toLowerCase()}));var S=function(e){var t,n,r,i,o,s,a,l,u,c,d,p,f,h,g,m,v,y,A,b="sizzle"+1*new Date,x=e.document,C=0,w=0,T=le(),k=le(),S=le(),E=le(),_=function(e,t){return e===t&&(d=!0),0},V={}.hasOwnProperty,j=[],N=j.pop,I=j.push,O=j.push,M=j.slice,L=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},B="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",H="[\\x20\\t\\r\\n\\f]",D="(?:\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",q="\\[[\\x20\\t\\r\\n\\f]*("+D+")(?:"+H+"*([*^$|!~]?=)"+H+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+D+"))|)"+H+"*\\]",P=":("+D+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+q+")*)|.*)\\)|)",R=new RegExp(H+"+","g"),F=new RegExp("^[\\x20\\t\\r\\n\\f]+|((?:^|[^\\\\])(?:\\\\.)*)[\\x20\\t\\r\\n\\f]+$","g"),W=new RegExp("^[\\x20\\t\\r\\n\\f]*,[\\x20\\t\\r\\n\\f]*"),$=new RegExp("^[\\x20\\t\\r\\n\\f]*([>+~]|[\\x20\\t\\r\\n\\f])[\\x20\\t\\r\\n\\f]*"),Z=new RegExp(H+"|>"),U=new RegExp(P),z=new RegExp("^"+D+"$"),X={ID:new RegExp("^#("+D+")"),CLASS:new RegExp("^\\.("+D+")"),TAG:new RegExp("^("+D+"|[*])"),ATTR:new RegExp("^"+q),PSEUDO:new RegExp("^"+P),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\([\\x20\\t\\r\\n\\f]*(even|odd|(([+-]|)(\\d*)n|)[\\x20\\t\\r\\n\\f]*(?:([+-]|)[\\x20\\t\\r\\n\\f]*(\\d+)|))[\\x20\\t\\r\\n\\f]*\\)|)","i"),bool:new RegExp("^(?:"+B+")$","i"),needsContext:new RegExp("^[\\x20\\t\\r\\n\\f]*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\([\\x20\\t\\r\\n\\f]*((?:-\\d)?\\d*)[\\x20\\t\\r\\n\\f]*\\)|)(?=[^-]|$)","i")},Y=/HTML$/i,G=/^(?:input|select|textarea|button)$/i,Q=/^h\d$/i,J=/^[^{]+\{\s*\[native \w/,K=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\([^\\r\\n\\f])","g"),ne=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},re=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ie=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},oe=function(){p()},se=be((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{O.apply(j=M.call(x.childNodes),x.childNodes),j[x.childNodes.length].nodeType}catch(e){O={apply:j.length?function(e,t){I.apply(e,M.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function ae(e,t,r,i){var o,a,u,c,d,h,v,y=t&&t.ownerDocument,x=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==x&&9!==x&&11!==x)return r;if(!i&&(p(t),t=t||f,g)){if(11!==x&&(d=K.exec(e)))if(o=d[1]){if(9===x){if(!(u=t.getElementById(o)))return r;if(u.id===o)return r.push(u),r}else if(y&&(u=y.getElementById(o))&&A(t,u)&&u.id===o)return r.push(u),r}else{if(d[2])return O.apply(r,t.getElementsByTagName(e)),r;if((o=d[3])&&n.getElementsByClassName&&t.getElementsByClassName)return O.apply(r,t.getElementsByClassName(o)),r}if(n.qsa&&!E[e+" "]&&(!m||!m.test(e))&&(1!==x||"object"!==t.nodeName.toLowerCase())){if(v=e,y=t,1===x&&(Z.test(e)||$.test(e))){for((y=ee.test(e)&&ve(t.parentNode)||t)===t&&n.scope||((c=t.getAttribute("id"))?c=c.replace(re,ie):t.setAttribute("id",c=b)),a=(h=s(e)).length;a--;)h[a]=(c?"#"+c:":scope")+" "+Ae(h[a]);v=h.join(",")}try{return O.apply(r,y.querySelectorAll(v)),r}catch(t){E(e,!0)}finally{c===b&&t.removeAttribute("id")}}}return l(e.replace(F,"$1"),t,r,i)}function le(){var e=[];return function t(n,i){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=i}}function ue(e){return e[b]=!0,e}function ce(e){var t=f.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function de(e,t){for(var n=e.split("|"),i=n.length;i--;)r.attrHandle[n[i]]=t}function pe(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function fe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function he(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function ge(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&se(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function me(e){return ue((function(t){return t=+t,ue((function(n,r){for(var i,o=e([],n.length,t),s=o.length;s--;)n[i=o[s]]&&(n[i]=!(r[i]=n[i]))}))}))}function ve(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=ae.support={},o=ae.isXML=function(e){var t=e&&e.namespaceURI,n=e&&(e.ownerDocument||e).documentElement;return!Y.test(t||n&&n.nodeName||"HTML")},p=ae.setDocument=function(e){var t,i,s=e?e.ownerDocument||e:x;return s!=f&&9===s.nodeType&&s.documentElement?(h=(f=s).documentElement,g=!o(f),x!=f&&(i=f.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",oe,!1):i.attachEvent&&i.attachEvent("onunload",oe)),n.scope=ce((function(e){return h.appendChild(e).appendChild(f.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length})),n.attributes=ce((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=ce((function(e){return e.appendChild(f.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=J.test(f.getElementsByClassName),n.getById=ce((function(e){return h.appendChild(e).id=b,!f.getElementsByName||!f.getElementsByName(b).length})),n.getById?(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(i=t.getElementsByName(e),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&g)return t.getElementsByClassName(e)},v=[],m=[],(n.qsa=J.test(f.querySelectorAll))&&(ce((function(e){var t;h.appendChild(e).innerHTML="<a id='"+b+"'></a><select id='"+b+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),e.querySelectorAll("[selected]").length||m.push("\\[[\\x20\\t\\r\\n\\f]*(?:value|"+B+")"),e.querySelectorAll("[id~="+b+"-]").length||m.push("~="),(t=f.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||m.push("\\[[\\x20\\t\\r\\n\\f]*name[\\x20\\t\\r\\n\\f]*=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),e.querySelectorAll(":checked").length||m.push(":checked"),e.querySelectorAll("a#"+b+"+*").length||m.push(".#.+[+~]"),e.querySelectorAll("\\\f"),m.push("[\\r\\n\\f]")})),ce((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=f.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&m.push("name[\\x20\\t\\r\\n\\f]*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),m.push(",.*:")}))),(n.matchesSelector=J.test(y=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&ce((function(e){n.disconnectedMatch=y.call(e,"*"),y.call(e,"[s!='']:x"),v.push("!=",P)})),m=m.length&&new RegExp(m.join("|")),v=v.length&&new RegExp(v.join("|")),t=J.test(h.compareDocumentPosition),A=t||J.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},_=t?function(e,t){if(e===t)return d=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e==f||e.ownerDocument==x&&A(x,e)?-1:t==f||t.ownerDocument==x&&A(x,t)?1:c?L(c,e)-L(c,t):0:4&r?-1:1)}:function(e,t){if(e===t)return d=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,s=[e],a=[t];if(!i||!o)return e==f?-1:t==f?1:i?-1:o?1:c?L(c,e)-L(c,t):0;if(i===o)return pe(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)a.unshift(n);for(;s[r]===a[r];)r++;return r?pe(s[r],a[r]):s[r]==x?-1:a[r]==x?1:0},f):f},ae.matches=function(e,t){return ae(e,null,null,t)},ae.matchesSelector=function(e,t){if(p(e),n.matchesSelector&&g&&!E[t+" "]&&(!v||!v.test(t))&&(!m||!m.test(t)))try{var r=y.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){E(t,!0)}return ae(t,f,null,[e]).length>0},ae.contains=function(e,t){return(e.ownerDocument||e)!=f&&p(e),A(e,t)},ae.attr=function(e,t){(e.ownerDocument||e)!=f&&p(e);var i=r.attrHandle[t.toLowerCase()],o=i&&V.call(r.attrHandle,t.toLowerCase())?i(e,t,!g):void 0;return void 0!==o?o:n.attributes||!g?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},ae.escape=function(e){return(e+"").replace(re,ie)},ae.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},ae.uniqueSort=function(e){var t,r=[],i=0,o=0;if(d=!n.detectDuplicates,c=!n.sortStable&&e.slice(0),e.sort(_),d){for(;t=e[o++];)t===e[o]&&(i=r.push(o));for(;i--;)e.splice(r[i],1)}return c=null,e},i=ae.getText=function(e){var t,n="",r=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=i(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[r++];)n+=i(t);return n},r=ae.selectors={cacheLength:50,createPseudo:ue,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||ae.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&ae.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return X.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&U.test(n)&&(t=s(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=T[e+" "];return t||(t=new RegExp("(^|[\\x20\\t\\r\\n\\f])"+e+"("+H+"|$)"))&&T(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(r){var i=ae.attr(r,e);return null==i?"!="===t:!t||(i+="","="===t?i===n:"!="===t?i!==n:"^="===t?n&&0===i.indexOf(n):"*="===t?n&&i.indexOf(n)>-1:"$="===t?n&&i.slice(-n.length)===n:"~="===t?(" "+i.replace(R," ")+" ").indexOf(n)>-1:"|="===t&&(i===n||i.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,l){var u,c,d,p,f,h,g=o!==s?"nextSibling":"previousSibling",m=t.parentNode,v=a&&t.nodeName.toLowerCase(),y=!l&&!a,A=!1;if(m){if(o){for(;g;){for(p=t;p=p[g];)if(a?p.nodeName.toLowerCase()===v:1===p.nodeType)return!1;h=g="only"===e&&!h&&"nextSibling"}return!0}if(h=[s?m.firstChild:m.lastChild],s&&y){for(A=(f=(u=(c=(d=(p=m)[b]||(p[b]={}))[p.uniqueID]||(d[p.uniqueID]={}))[e]||[])[0]===C&&u[1])&&u[2],p=f&&m.childNodes[f];p=++f&&p&&p[g]||(A=f=0)||h.pop();)if(1===p.nodeType&&++A&&p===t){c[e]=[C,f,A];break}}else if(y&&(A=f=(u=(c=(d=(p=t)[b]||(p[b]={}))[p.uniqueID]||(d[p.uniqueID]={}))[e]||[])[0]===C&&u[1]),!1===A)for(;(p=++f&&p&&p[g]||(A=f=0)||h.pop())&&((a?p.nodeName.toLowerCase()!==v:1!==p.nodeType)||!++A||(y&&((c=(d=p[b]||(p[b]={}))[p.uniqueID]||(d[p.uniqueID]={}))[e]=[C,A]),p!==t)););return(A-=i)===r||A%r==0&&A/r>=0}}},PSEUDO:function(e,t){var n,i=r.pseudos[e]||r.setFilters[e.toLowerCase()]||ae.error("unsupported pseudo: "+e);return i[b]?i(t):i.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?ue((function(e,n){for(var r,o=i(e,t),s=o.length;s--;)e[r=L(e,o[s])]=!(n[r]=o[s])})):function(e){return i(e,0,n)}):i}},pseudos:{not:ue((function(e){var t=[],n=[],r=a(e.replace(F,"$1"));return r[b]?ue((function(e,t,n,i){for(var o,s=r(e,null,i,[]),a=e.length;a--;)(o=s[a])&&(e[a]=!(t[a]=o))})):function(e,i,o){return t[0]=e,r(t,null,o,n),t[0]=null,!n.pop()}})),has:ue((function(e){return function(t){return ae(e,t).length>0}})),contains:ue((function(e){return e=e.replace(te,ne),function(t){return(t.textContent||i(t)).indexOf(e)>-1}})),lang:ue((function(e){return z.test(e||"")||ae.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=g?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===f.activeElement&&(!f.hasFocus||f.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ge(!1),disabled:ge(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return Q.test(e.nodeName)},input:function(e){return G.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:me((function(){return[0]})),last:me((function(e,t){return[t-1]})),eq:me((function(e,t,n){return[n<0?n+t:n]})),even:me((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:me((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:me((function(e,t,n){for(var r=n<0?n+t:n>t?t:n;--r>=0;)e.push(r);return e})),gt:me((function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e}))}},r.pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=fe(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=he(t);function ye(){}function Ae(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function be(e,t,n){var r=t.dir,i=t.next,o=i||r,s=n&&"parentNode"===o,a=w++;return t.first?function(t,n,i){for(;t=t[r];)if(1===t.nodeType||s)return e(t,n,i);return!1}:function(t,n,l){var u,c,d,p=[C,a];if(l){for(;t=t[r];)if((1===t.nodeType||s)&&e(t,n,l))return!0}else for(;t=t[r];)if(1===t.nodeType||s)if(c=(d=t[b]||(t[b]={}))[t.uniqueID]||(d[t.uniqueID]={}),i&&i===t.nodeName.toLowerCase())t=t[r]||t;else{if((u=c[o])&&u[0]===C&&u[1]===a)return p[2]=u[2];if(c[o]=p,p[2]=e(t,n,l))return!0}return!1}}function xe(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function Ce(e,t,n,r,i){for(var o,s=[],a=0,l=e.length,u=null!=t;a<l;a++)(o=e[a])&&(n&&!n(o,r,i)||(s.push(o),u&&t.push(a)));return s}function we(e,t,n,r,i,o){return r&&!r[b]&&(r=we(r)),i&&!i[b]&&(i=we(i,o)),ue((function(o,s,a,l){var u,c,d,p=[],f=[],h=s.length,g=o||function(e,t,n){for(var r=0,i=t.length;r<i;r++)ae(e,t[r],n);return n}(t||"*",a.nodeType?[a]:a,[]),m=!e||!o&&t?g:Ce(g,p,e,a,l),v=n?i||(o?e:h||r)?[]:s:m;if(n&&n(m,v,a,l),r)for(u=Ce(v,f),r(u,[],a,l),c=u.length;c--;)(d=u[c])&&(v[f[c]]=!(m[f[c]]=d));if(o){if(i||e){if(i){for(u=[],c=v.length;c--;)(d=v[c])&&u.push(m[c]=d);i(null,v=[],u,l)}for(c=v.length;c--;)(d=v[c])&&(u=i?L(o,d):p[c])>-1&&(o[u]=!(s[u]=d))}}else v=Ce(v===s?v.splice(h,v.length):v),i?i(null,s,v,l):O.apply(s,v)}))}function Te(e){for(var t,n,i,o=e.length,s=r.relative[e[0].type],a=s||r.relative[" "],l=s?1:0,c=be((function(e){return e===t}),a,!0),d=be((function(e){return L(t,e)>-1}),a,!0),p=[function(e,n,r){var i=!s&&(r||n!==u)||((t=n).nodeType?c(e,n,r):d(e,n,r));return t=null,i}];l<o;l++)if(n=r.relative[e[l].type])p=[be(xe(p),n)];else{if((n=r.filter[e[l].type].apply(null,e[l].matches))[b]){for(i=++l;i<o&&!r.relative[e[i].type];i++);return we(l>1&&xe(p),l>1&&Ae(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(F,"$1"),n,l<i&&Te(e.slice(l,i)),i<o&&Te(e=e.slice(i)),i<o&&Ae(e))}p.push(n)}return xe(p)}return ye.prototype=r.filters=r.pseudos,r.setFilters=new ye,s=ae.tokenize=function(e,t){var n,i,o,s,a,l,u,c=k[e+" "];if(c)return t?0:c.slice(0);for(a=e,l=[],u=r.preFilter;a;){for(s in n&&!(i=W.exec(a))||(i&&(a=a.slice(i[0].length)||a),l.push(o=[])),n=!1,(i=$.exec(a))&&(n=i.shift(),o.push({value:n,type:i[0].replace(F," ")}),a=a.slice(n.length)),r.filter)!(i=X[s].exec(a))||u[s]&&!(i=u[s](i))||(n=i.shift(),o.push({value:n,type:s,matches:i}),a=a.slice(n.length));if(!n)break}return t?a.length:a?ae.error(e):k(e,l).slice(0)},a=ae.compile=function(e,t){var n,i=[],o=[],a=S[e+" "];if(!a){for(t||(t=s(e)),n=t.length;n--;)(a=Te(t[n]))[b]?i.push(a):o.push(a);a=S(e,function(e,t){var n=t.length>0,i=e.length>0,o=function(o,s,a,l,c){var d,h,m,v=0,y="0",A=o&&[],b=[],x=u,w=o||i&&r.find.TAG("*",c),T=C+=null==x?1:Math.random()||.1,k=w.length;for(c&&(u=s==f||s||c);y!==k&&null!=(d=w[y]);y++){if(i&&d){for(h=0,s||d.ownerDocument==f||(p(d),a=!g);m=e[h++];)if(m(d,s||f,a)){l.push(d);break}c&&(C=T)}n&&((d=!m&&d)&&v--,o&&A.push(d))}if(v+=y,n&&y!==v){for(h=0;m=t[h++];)m(A,b,s,a);if(o){if(v>0)for(;y--;)A[y]||b[y]||(b[y]=N.call(l));b=Ce(b)}O.apply(l,b),c&&!o&&b.length>0&&v+t.length>1&&ae.uniqueSort(l)}return c&&(C=T,u=x),A};return n?ue(o):o}(o,i)),a.selector=e}return a},l=ae.select=function(e,t,n,i){var o,l,u,c,d,p="function"==typeof e&&e,f=!i&&s(e=p.selector||e);if(n=n||[],1===f.length){if((l=f[0]=f[0].slice(0)).length>2&&"ID"===(u=l[0]).type&&9===t.nodeType&&g&&r.relative[l[1].type]){if(!(t=(r.find.ID(u.matches[0].replace(te,ne),t)||[])[0]))return n;p&&(t=t.parentNode),e=e.slice(l.shift().value.length)}for(o=X.needsContext.test(e)?0:l.length;o--&&(u=l[o],!r.relative[c=u.type]);)if((d=r.find[c])&&(i=d(u.matches[0].replace(te,ne),ee.test(l[0].type)&&ve(t.parentNode)||t))){if(l.splice(o,1),!(e=i.length&&Ae(l)))return O.apply(n,i),n;break}}return(p||a(e,f))(i,t,!g,n,!t||ee.test(e)&&ve(t.parentNode)||t),n},n.sortStable=b.split("").sort(_).join("")===b,n.detectDuplicates=!!d,p(),n.sortDetached=ce((function(e){return 1&e.compareDocumentPosition(f.createElement("fieldset"))})),ce((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||de("type|href|height|width",(function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),n.attributes&&ce((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||de("value",(function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),ce((function(e){return null==e.getAttribute("disabled")}))||de(B,(function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null})),ae}(r);T.find=S,T.expr=S.selectors,T.expr[":"]=T.expr.pseudos,T.uniqueSort=T.unique=S.uniqueSort,T.text=S.getText,T.isXMLDoc=S.isXML,T.contains=S.contains,T.escapeSelector=S.escape;var E=function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&T(e).is(n))break;r.push(e)}return r},_=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},V=T.expr.match.needsContext;function j(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var N=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function I(e,t,n){return v(t)?T.grep(e,(function(e,r){return!!t.call(e,r,e)!==n})):t.nodeType?T.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?T.grep(e,(function(e){return c.call(t,e)>-1!==n})):T.filter(t,e,n)}T.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?T.find.matchesSelector(r,e)?[r]:[]:T.find.matches(e,T.grep(t,(function(e){return 1===e.nodeType})))},T.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(T(e).filter((function(){for(t=0;t<r;t++)if(T.contains(i[t],this))return!0})));for(n=this.pushStack([]),t=0;t<r;t++)T.find(e,i[t],n);return r>1?T.uniqueSort(n):n},filter:function(e){return this.pushStack(I(this,e||[],!1))},not:function(e){return this.pushStack(I(this,e||[],!0))},is:function(e){return!!I(this,"string"==typeof e&&V.test(e)?T(e):e||[],!1).length}});var O,M=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(T.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||O,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:M.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof T?t[0]:t,T.merge(this,T.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:A,!0)),N.test(r[1])&&T.isPlainObject(t))for(r in t)v(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(i=A.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):v(e)?void 0!==n.ready?n.ready(e):e(T):T.makeArray(e,this)}).prototype=T.fn,O=T(A);var L=/^(?:parents|prev(?:Until|All))/,B={children:!0,contents:!0,next:!0,prev:!0};function H(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}T.fn.extend({has:function(e){var t=T(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(T.contains(this,t[e]))return!0}))},closest:function(e,t){var n,r=0,i=this.length,o=[],s="string"!=typeof e&&T(e);if(!V.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&T.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?T.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?c.call(T(e),this[0]):c.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(T.uniqueSort(T.merge(this.get(),T(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),T.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return E(e,"parentNode")},parentsUntil:function(e,t,n){return E(e,"parentNode",n)},next:function(e){return H(e,"nextSibling")},prev:function(e){return H(e,"previousSibling")},nextAll:function(e){return E(e,"nextSibling")},prevAll:function(e){return E(e,"previousSibling")},nextUntil:function(e,t,n){return E(e,"nextSibling",n)},prevUntil:function(e,t,n){return E(e,"previousSibling",n)},siblings:function(e){return _((e.parentNode||{}).firstChild,e)},children:function(e){return _(e.firstChild)},contents:function(e){return null!=e.contentDocument&&s(e.contentDocument)?e.contentDocument:(j(e,"template")&&(e=e.content||e),T.merge([],e.childNodes))}},(function(e,t){T.fn[e]=function(n,r){var i=T.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=T.filter(r,i)),this.length>1&&(B[e]||T.uniqueSort(i),L.test(e)&&i.reverse()),this.pushStack(i)}}));var D=/[^\x20\t\r\n\f]+/g;function q(e){return e}function P(e){throw e}function R(e,t,n,r){var i;try{e&&v(i=e.promise)?i.call(e).done(t).fail(n):e&&v(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}T.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return T.each(e.match(D)||[],(function(e,n){t[n]=!0})),t}(e):T.extend({},e);var t,n,r,i,o=[],s=[],a=-1,l=function(){for(i=i||e.once,r=t=!0;s.length;a=-1)for(n=s.shift();++a<o.length;)!1===o[a].apply(n[0],n[1])&&e.stopOnFalse&&(a=o.length,n=!1);e.memory||(n=!1),t=!1,i&&(o=n?[]:"")},u={add:function(){return o&&(n&&!t&&(a=o.length-1,s.push(n)),function t(n){T.each(n,(function(n,r){v(r)?e.unique&&u.has(r)||o.push(r):r&&r.length&&"string"!==C(r)&&t(r)}))}(arguments),n&&!t&&l()),this},remove:function(){return T.each(arguments,(function(e,t){for(var n;(n=T.inArray(t,o,n))>-1;)o.splice(n,1),n<=a&&a--})),this},has:function(e){return e?T.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=s=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=s=[],n||t||(o=n=""),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=[e,(n=n||[]).slice?n.slice():n],s.push(n),t||l()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!r}};return u},T.extend({Deferred:function(e){var t=[["notify","progress",T.Callbacks("memory"),T.Callbacks("memory"),2],["resolve","done",T.Callbacks("once memory"),T.Callbacks("once memory"),0,"resolved"],["reject","fail",T.Callbacks("once memory"),T.Callbacks("once memory"),1,"rejected"]],n="pending",i={state:function(){return n},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return i.then(null,e)},pipe:function(){var e=arguments;return T.Deferred((function(n){T.each(t,(function(t,r){var i=v(e[r[4]])&&e[r[4]];o[r[1]]((function(){var e=i&&i.apply(this,arguments);e&&v(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,i?[e]:arguments)}))})),e=null})).promise()},then:function(e,n,i){var o=0;function s(e,t,n,i){return function(){var a=this,l=arguments,u=function(){var r,u;if(!(e<o)){if((r=n.apply(a,l))===t.promise())throw new TypeError("Thenable self-resolution");u=r&&("object"==typeof r||"function"==typeof r)&&r.then,v(u)?i?u.call(r,s(o,t,q,i),s(o,t,P,i)):(o++,u.call(r,s(o,t,q,i),s(o,t,P,i),s(o,t,q,t.notifyWith))):(n!==q&&(a=void 0,l=[r]),(i||t.resolveWith)(a,l))}},c=i?u:function(){try{u()}catch(r){T.Deferred.exceptionHook&&T.Deferred.exceptionHook(r,c.stackTrace),e+1>=o&&(n!==P&&(a=void 0,l=[r]),t.rejectWith(a,l))}};e?c():(T.Deferred.getStackHook&&(c.stackTrace=T.Deferred.getStackHook()),r.setTimeout(c))}}return T.Deferred((function(r){t[0][3].add(s(0,r,v(i)?i:q,r.notifyWith)),t[1][3].add(s(0,r,v(e)?e:q)),t[2][3].add(s(0,r,v(n)?n:P))})).promise()},promise:function(e){return null!=e?T.extend(e,i):i}},o={};return T.each(t,(function(e,r){var s=r[2],a=r[5];i[r[1]]=s.add,a&&s.add((function(){n=a}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),s.add(r[3].fire),o[r[0]]=function(){return o[r[0]+"With"](this===o?void 0:this,arguments),this},o[r[0]+"With"]=s.fireWith})),i.promise(o),e&&e.call(o,o),o},when:function(e){var t=arguments.length,n=t,r=Array(n),i=a.call(arguments),o=T.Deferred(),s=function(e){return function(n){r[e]=this,i[e]=arguments.length>1?a.call(arguments):n,--t||o.resolveWith(r,i)}};if(t<=1&&(R(e,o.done(s(n)).resolve,o.reject,!t),"pending"===o.state()||v(i[n]&&i[n].then)))return o.then();for(;n--;)R(i[n],s(n),o.reject);return o.promise()}});var F=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;T.Deferred.exceptionHook=function(e,t){r.console&&r.console.warn&&e&&F.test(e.name)&&r.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},T.readyException=function(e){r.setTimeout((function(){throw e}))};var W=T.Deferred();function $(){A.removeEventListener("DOMContentLoaded",$),r.removeEventListener("load",$),T.ready()}T.fn.ready=function(e){return W.then(e).catch((function(e){T.readyException(e)})),this},T.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--T.readyWait:T.isReady)||(T.isReady=!0,!0!==e&&--T.readyWait>0||W.resolveWith(A,[T]))}}),T.ready.then=W.then,"complete"===A.readyState||"loading"!==A.readyState&&!A.documentElement.doScroll?r.setTimeout(T.ready):(A.addEventListener("DOMContentLoaded",$),r.addEventListener("load",$));var Z=function(e,t,n,r,i,o,s){var a=0,l=e.length,u=null==n;if("object"===C(n))for(a in i=!0,n)Z(e,t,a,n[a],!0,o,s);else if(void 0!==r&&(i=!0,v(r)||(s=!0),u&&(s?(t.call(e,r),t=null):(u=t,t=function(e,t,n){return u.call(T(e),n)})),t))for(;a<l;a++)t(e[a],n,s?r:r.call(e[a],a,t(e[a],n)));return i?e:u?t.call(e):l?t(e[0],n):o},U=/^-ms-/,z=/-([a-z])/g;function X(e,t){return t.toUpperCase()}function Y(e){return e.replace(U,"ms-").replace(z,X)}var G=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Q(){this.expando=T.expando+Q.uid++}Q.uid=1,Q.prototype={cache:function(e){var t=e[this.expando];return t||(t={},G(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[Y(t)]=n;else for(r in t)i[Y(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][Y(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(Y):(t=Y(t))in r?[t]:t.match(D)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||T.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!T.isEmptyObject(t)}};var J=new Q,K=new Q,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(n)}catch(e){}K.set(e,t,n)}else n=void 0;return n}T.extend({hasData:function(e){return K.hasData(e)||J.hasData(e)},data:function(e,t,n){return K.access(e,t,n)},removeData:function(e,t){K.remove(e,t)},_data:function(e,t,n){return J.access(e,t,n)},_removeData:function(e,t){J.remove(e,t)}}),T.fn.extend({data:function(e,t){var n,r,i,o=this[0],s=o&&o.attributes;if(void 0===e){if(this.length&&(i=K.get(o),1===o.nodeType&&!J.get(o,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(r=s[n].name).indexOf("data-")&&(r=Y(r.slice(5)),ne(o,r,i[r]));J.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each((function(){K.set(this,e)})):Z(this,(function(t){var n;if(o&&void 0===t)return void 0!==(n=K.get(o,e))||void 0!==(n=ne(o,e))?n:void 0;this.each((function(){K.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){K.remove(this,e)}))}}),T.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=J.get(e,t),n&&(!r||Array.isArray(n)?r=J.access(e,t,T.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=T.queue(e,t),r=n.length,i=n.shift(),o=T._queueHooks(e,t);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,(function(){T.dequeue(e,t)}),o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return J.get(e,n)||J.access(e,n,{empty:T.Callbacks("once memory").add((function(){J.remove(e,[t+"queue",n])}))})}}),T.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?T.queue(this[0],e):void 0===t?this:this.each((function(){var n=T.queue(this,e,t);T._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&T.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){T.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=T.Deferred(),o=this,s=this.length,a=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(n=J.get(o[s],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(a));return a(),i.promise(t)}});var re=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ie=new RegExp("^(?:([+-])=|)("+re+")([a-z%]*)$","i"),oe=["Top","Right","Bottom","Left"],se=A.documentElement,ae=function(e){return T.contains(e.ownerDocument,e)},le={composed:!0};se.getRootNode&&(ae=function(e){return T.contains(e.ownerDocument,e)||e.getRootNode(le)===e.ownerDocument});var ue=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&ae(e)&&"none"===T.css(e,"display")};function ce(e,t,n,r){var i,o,s=20,a=r?function(){return r.cur()}:function(){return T.css(e,t,"")},l=a(),u=n&&n[3]||(T.cssNumber[t]?"":"px"),c=e.nodeType&&(T.cssNumber[t]||"px"!==u&&+l)&&ie.exec(T.css(e,t));if(c&&c[3]!==u){for(l/=2,u=u||c[3],c=+l||1;s--;)T.style(e,t,c+u),(1-o)*(1-(o=a()/l||.5))<=0&&(s=0),c/=o;c*=2,T.style(e,t,c+u),n=n||[]}return n&&(c=+c||+l||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=u,r.start=c,r.end=i)),i}var de={};function pe(e){var t,n=e.ownerDocument,r=e.nodeName,i=de[r];return i||(t=n.body.appendChild(n.createElement(r)),i=T.css(t,"display"),t.parentNode.removeChild(t),"none"===i&&(i="block"),de[r]=i,i)}function fe(e,t){for(var n,r,i=[],o=0,s=e.length;o<s;o++)(r=e[o]).style&&(n=r.style.display,t?("none"===n&&(i[o]=J.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&ue(r)&&(i[o]=pe(r))):"none"!==n&&(i[o]="none",J.set(r,"display",n)));for(o=0;o<s;o++)null!=i[o]&&(e[o].style.display=i[o]);return e}T.fn.extend({show:function(){return fe(this,!0)},hide:function(){return fe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){ue(this)?T(this).show():T(this).hide()}))}});var he,ge,me=/^(?:checkbox|radio)$/i,ve=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ye=/^$|^module$|\/(?:java|ecma)script/i;he=A.createDocumentFragment().appendChild(A.createElement("div")),(ge=A.createElement("input")).setAttribute("type","radio"),ge.setAttribute("checked","checked"),ge.setAttribute("name","t"),he.appendChild(ge),m.checkClone=he.cloneNode(!0).cloneNode(!0).lastChild.checked,he.innerHTML="<textarea>x</textarea>",m.noCloneChecked=!!he.cloneNode(!0).lastChild.defaultValue,he.innerHTML="<option></option>",m.option=!!he.lastChild;var Ae={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function be(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&j(e,t)?T.merge([e],n):n}function xe(e,t){for(var n=0,r=e.length;n<r;n++)J.set(e[n],"globalEval",!t||J.get(t[n],"globalEval"))}Ae.tbody=Ae.tfoot=Ae.colgroup=Ae.caption=Ae.thead,Ae.th=Ae.td,m.option||(Ae.optgroup=Ae.option=[1,"<select multiple='multiple'>","</select>"]);var Ce=/<|&#?\w+;/;function we(e,t,n,r,i){for(var o,s,a,l,u,c,d=t.createDocumentFragment(),p=[],f=0,h=e.length;f<h;f++)if((o=e[f])||0===o)if("object"===C(o))T.merge(p,o.nodeType?[o]:o);else if(Ce.test(o)){for(s=s||d.appendChild(t.createElement("div")),a=(ve.exec(o)||["",""])[1].toLowerCase(),l=Ae[a]||Ae._default,s.innerHTML=l[1]+T.htmlPrefilter(o)+l[2],c=l[0];c--;)s=s.lastChild;T.merge(p,s.childNodes),(s=d.firstChild).textContent=""}else p.push(t.createTextNode(o));for(d.textContent="",f=0;o=p[f++];)if(r&&T.inArray(o,r)>-1)i&&i.push(o);else if(u=ae(o),s=be(d.appendChild(o),"script"),u&&xe(s),n)for(c=0;o=s[c++];)ye.test(o.type||"")&&n.push(o);return d}var Te=/^([^.]*)(?:\.(.+)|)/;function ke(){return!0}function Se(){return!1}function Ee(e,t){return e===function(){try{return A.activeElement}catch(e){}}()==("focus"===t)}function _e(e,t,n,r,i,o){var s,a;if("object"==typeof t){for(a in"string"!=typeof n&&(r=r||n,n=void 0),t)_e(e,a,n,r,t[a],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=Se;else if(!i)return e;return 1===o&&(s=i,i=function(e){return T().off(e),s.apply(this,arguments)},i.guid=s.guid||(s.guid=T.guid++)),e.each((function(){T.event.add(this,t,i,r,n)}))}function Ve(e,t,n){n?(J.set(e,t,!1),T.event.add(e,t,{namespace:!1,handler:function(e){var r,i,o=J.get(this,t);if(1&e.isTrigger&&this[t]){if(o.length)(T.event.special[t]||{}).delegateType&&e.stopPropagation();else if(o=a.call(arguments),J.set(this,t,o),r=n(this,t),this[t](),o!==(i=J.get(this,t))||r?J.set(this,t,!1):i={},o!==i)return e.stopImmediatePropagation(),e.preventDefault(),i&&i.value}else o.length&&(J.set(this,t,{value:T.event.trigger(T.extend(o[0],T.Event.prototype),o.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===J.get(e,t)&&T.event.add(e,t,ke)}T.event={global:{},add:function(e,t,n,r,i){var o,s,a,l,u,c,d,p,f,h,g,m=J.get(e);if(G(e))for(n.handler&&(n=(o=n).handler,i=o.selector),i&&T.find.matchesSelector(se,i),n.guid||(n.guid=T.guid++),(l=m.events)||(l=m.events=Object.create(null)),(s=m.handle)||(s=m.handle=function(t){return void 0!==T&&T.event.triggered!==t.type?T.event.dispatch.apply(e,arguments):void 0}),u=(t=(t||"").match(D)||[""]).length;u--;)f=g=(a=Te.exec(t[u])||[])[1],h=(a[2]||"").split(".").sort(),f&&(d=T.event.special[f]||{},f=(i?d.delegateType:d.bindType)||f,d=T.event.special[f]||{},c=T.extend({type:f,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&T.expr.match.needsContext.test(i),namespace:h.join(".")},o),(p=l[f])||((p=l[f]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(e,r,h,s)||e.addEventListener&&e.addEventListener(f,s)),d.add&&(d.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),i?p.splice(p.delegateCount++,0,c):p.push(c),T.event.global[f]=!0)},remove:function(e,t,n,r,i){var o,s,a,l,u,c,d,p,f,h,g,m=J.hasData(e)&&J.get(e);if(m&&(l=m.events)){for(u=(t=(t||"").match(D)||[""]).length;u--;)if(f=g=(a=Te.exec(t[u])||[])[1],h=(a[2]||"").split(".").sort(),f){for(d=T.event.special[f]||{},p=l[f=(r?d.delegateType:d.bindType)||f]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=p.length;o--;)c=p[o],!i&&g!==c.origType||n&&n.guid!==c.guid||a&&!a.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(p.splice(o,1),c.selector&&p.delegateCount--,d.remove&&d.remove.call(e,c));s&&!p.length&&(d.teardown&&!1!==d.teardown.call(e,h,m.handle)||T.removeEvent(e,f,m.handle),delete l[f])}else for(f in l)T.event.remove(e,f+t[u],n,r,!0);T.isEmptyObject(l)&&J.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,o,s,a=new Array(arguments.length),l=T.event.fix(e),u=(J.get(this,"events")||Object.create(null))[l.type]||[],c=T.event.special[l.type]||{};for(a[0]=l,t=1;t<arguments.length;t++)a[t]=arguments[t];if(l.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,l)){for(s=T.event.handlers.call(this,l,u),t=0;(i=s[t++])&&!l.isPropagationStopped();)for(l.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==o.namespace&&!l.rnamespace.test(o.namespace)||(l.handleObj=o,l.data=o.data,void 0!==(r=((T.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,a))&&!1===(l.result=r)&&(l.preventDefault(),l.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,l),l.result}},handlers:function(e,t){var n,r,i,o,s,a=[],l=t.delegateCount,u=e.target;if(l&&u.nodeType&&!("click"===e.type&&e.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(o=[],s={},n=0;n<l;n++)void 0===s[i=(r=t[n]).selector+" "]&&(s[i]=r.needsContext?T(i,this).index(u)>-1:T.find(i,this,null,[u]).length),s[i]&&o.push(r);o.length&&a.push({elem:u,handlers:o})}return u=this,l<t.length&&a.push({elem:u,handlers:t.slice(l)}),a},addProp:function(e,t){Object.defineProperty(T.Event.prototype,e,{enumerable:!0,configurable:!0,get:v(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[T.expando]?e:new T.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return me.test(t.type)&&t.click&&j(t,"input")&&Ve(t,"click",ke),!1},trigger:function(e){var t=this||e;return me.test(t.type)&&t.click&&j(t,"input")&&Ve(t,"click"),!0},_default:function(e){var t=e.target;return me.test(t.type)&&t.click&&j(t,"input")&&J.get(t,"click")||j(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},T.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},T.Event=function(e,t){if(!(this instanceof T.Event))return new T.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?ke:Se,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&T.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[T.expando]=!0},T.Event.prototype={constructor:T.Event,isDefaultPrevented:Se,isPropagationStopped:Se,isImmediatePropagationStopped:Se,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=ke,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=ke,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=ke,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},T.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},T.event.addProp),T.each({focus:"focusin",blur:"focusout"},(function(e,t){T.event.special[e]={setup:function(){return Ve(this,e,Ee),!1},trigger:function(){return Ve(this,e),!0},_default:function(){return!0},delegateType:t}})),T.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){T.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;return i&&(i===r||T.contains(r,i))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}})),T.fn.extend({on:function(e,t,n,r){return _e(this,e,t,n,r)},one:function(e,t,n,r){return _e(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,T(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Se),this.each((function(){T.event.remove(this,e,n,t)}))}});var je=/<script|<style|<link/i,Ne=/checked\s*(?:[^=]|=\s*.checked.)/i,Ie=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Oe(e,t){return j(e,"table")&&j(11!==t.nodeType?t:t.firstChild,"tr")&&T(e).children("tbody")[0]||e}function Me(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Le(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Be(e,t){var n,r,i,o,s,a;if(1===t.nodeType){if(J.hasData(e)&&(a=J.get(e).events))for(i in J.remove(t,"handle events"),a)for(n=0,r=a[i].length;n<r;n++)T.event.add(t,i,a[i][n]);K.hasData(e)&&(o=K.access(e),s=T.extend({},o),K.set(t,s))}}function He(e,t){var n=t.nodeName.toLowerCase();"input"===n&&me.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function De(e,t,n,r){t=l(t);var i,o,s,a,u,c,d=0,p=e.length,f=p-1,h=t[0],g=v(h);if(g||p>1&&"string"==typeof h&&!m.checkClone&&Ne.test(h))return e.each((function(i){var o=e.eq(i);g&&(t[0]=h.call(this,i,o.html())),De(o,t,n,r)}));if(p&&(o=(i=we(t,e[0].ownerDocument,!1,e,r)).firstChild,1===i.childNodes.length&&(i=o),o||r)){for(a=(s=T.map(be(i,"script"),Me)).length;d<p;d++)u=i,d!==f&&(u=T.clone(u,!0,!0),a&&T.merge(s,be(u,"script"))),n.call(e[d],u,d);if(a)for(c=s[s.length-1].ownerDocument,T.map(s,Le),d=0;d<a;d++)u=s[d],ye.test(u.type||"")&&!J.access(u,"globalEval")&&T.contains(c,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?T._evalUrl&&!u.noModule&&T._evalUrl(u.src,{nonce:u.nonce||u.getAttribute("nonce")},c):x(u.textContent.replace(Ie,""),u,c))}return e}function qe(e,t,n){for(var r,i=t?T.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||T.cleanData(be(r)),r.parentNode&&(n&&ae(r)&&xe(be(r,"script")),r.parentNode.removeChild(r));return e}T.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var r,i,o,s,a=e.cloneNode(!0),l=ae(e);if(!(m.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||T.isXMLDoc(e)))for(s=be(a),r=0,i=(o=be(e)).length;r<i;r++)He(o[r],s[r]);if(t)if(n)for(o=o||be(e),s=s||be(a),r=0,i=o.length;r<i;r++)Be(o[r],s[r]);else Be(e,a);return(s=be(a,"script")).length>0&&xe(s,!l&&be(e,"script")),a},cleanData:function(e){for(var t,n,r,i=T.event.special,o=0;void 0!==(n=e[o]);o++)if(G(n)){if(t=n[J.expando]){if(t.events)for(r in t.events)i[r]?T.event.remove(n,r):T.removeEvent(n,r,t.handle);n[J.expando]=void 0}n[K.expando]&&(n[K.expando]=void 0)}}}),T.fn.extend({detach:function(e){return qe(this,e,!0)},remove:function(e){return qe(this,e)},text:function(e){return Z(this,(function(e){return void 0===e?T.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return De(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Oe(this,e).appendChild(e)}))},prepend:function(){return De(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Oe(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return De(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return De(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(T.cleanData(be(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return T.clone(this,e,t)}))},html:function(e){return Z(this,(function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!je.test(e)&&!Ae[(ve.exec(e)||["",""])[1].toLowerCase()]){e=T.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(T.cleanData(be(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return De(this,arguments,(function(t){var n=this.parentNode;T.inArray(this,e)<0&&(T.cleanData(be(this)),n&&n.replaceChild(t,this))}),e)}}),T.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){T.fn[e]=function(e){for(var n,r=[],i=T(e),o=i.length-1,s=0;s<=o;s++)n=s===o?this:this.clone(!0),T(i[s])[t](n),u.apply(r,n.get());return this.pushStack(r)}}));var Pe=new RegExp("^("+re+")(?!px)[a-z%]+$","i"),Re=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=r),t.getComputedStyle(e)},Fe=function(e,t,n){var r,i,o={};for(i in t)o[i]=e.style[i],e.style[i]=t[i];for(i in r=n.call(e),t)e.style[i]=o[i];return r},We=new RegExp(oe.join("|"),"i");function $e(e,t,n){var r,i,o,s,a=e.style;return(n=n||Re(e))&&(""!==(s=n.getPropertyValue(t)||n[t])||ae(e)||(s=T.style(e,t)),!m.pixelBoxStyles()&&Pe.test(s)&&We.test(t)&&(r=a.width,i=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=r,a.minWidth=i,a.maxWidth=o)),void 0!==s?s+"":s}function Ze(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(c){u.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",se.appendChild(u).appendChild(c);var e=r.getComputedStyle(c);n="1%"!==e.top,l=12===t(e.marginLeft),c.style.right="60%",s=36===t(e.right),i=36===t(e.width),c.style.position="absolute",o=12===t(c.offsetWidth/3),se.removeChild(u),c=null}}function t(e){return Math.round(parseFloat(e))}var n,i,o,s,a,l,u=A.createElement("div"),c=A.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",m.clearCloneStyle="content-box"===c.style.backgroundClip,T.extend(m,{boxSizingReliable:function(){return e(),i},pixelBoxStyles:function(){return e(),s},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),l},scrollboxSize:function(){return e(),o},reliableTrDimensions:function(){var e,t,n,i;return null==a&&(e=A.createElement("table"),t=A.createElement("tr"),n=A.createElement("div"),e.style.cssText="position:absolute;left:-11111px;border-collapse:separate",t.style.cssText="border:1px solid",t.style.height="1px",n.style.height="9px",n.style.display="block",se.appendChild(e).appendChild(t).appendChild(n),i=r.getComputedStyle(t),a=parseInt(i.height,10)+parseInt(i.borderTopWidth,10)+parseInt(i.borderBottomWidth,10)===t.offsetHeight,se.removeChild(e)),a}}))}();var Ue=["Webkit","Moz","ms"],ze=A.createElement("div").style,Xe={};function Ye(e){return T.cssProps[e]||Xe[e]||(e in ze?e:Xe[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Ue.length;n--;)if((e=Ue[n]+t)in ze)return e}(e)||e)}var Ge=/^(none|table(?!-c[ea]).+)/,Qe=/^--/,Je={position:"absolute",visibility:"hidden",display:"block"},Ke={letterSpacing:"0",fontWeight:"400"};function et(e,t,n){var r=ie.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function tt(e,t,n,r,i,o){var s="width"===t?1:0,a=0,l=0;if(n===(r?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(l+=T.css(e,n+oe[s],!0,i)),r?("content"===n&&(l-=T.css(e,"padding"+oe[s],!0,i)),"margin"!==n&&(l-=T.css(e,"border"+oe[s]+"Width",!0,i))):(l+=T.css(e,"padding"+oe[s],!0,i),"padding"!==n?l+=T.css(e,"border"+oe[s]+"Width",!0,i):a+=T.css(e,"border"+oe[s]+"Width",!0,i));return!r&&o>=0&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-l-a-.5))||0),l}function nt(e,t,n){var r=Re(e),i=(!m.boxSizingReliable()||n)&&"border-box"===T.css(e,"boxSizing",!1,r),o=i,s=$e(e,t,r),a="offset"+t[0].toUpperCase()+t.slice(1);if(Pe.test(s)){if(!n)return s;s="auto"}return(!m.boxSizingReliable()&&i||!m.reliableTrDimensions()&&j(e,"tr")||"auto"===s||!parseFloat(s)&&"inline"===T.css(e,"display",!1,r))&&e.getClientRects().length&&(i="border-box"===T.css(e,"boxSizing",!1,r),(o=a in e)&&(s=e[a])),(s=parseFloat(s)||0)+tt(e,t,n||(i?"border":"content"),o,r,s)+"px"}function rt(e,t,n,r,i){return new rt.prototype.init(e,t,n,r,i)}T.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=$e(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,s,a=Y(t),l=Qe.test(t),u=e.style;if(l||(t=Ye(a)),s=T.cssHooks[t]||T.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(i=s.get(e,!1,r))?i:u[t];"string"==(o=typeof n)&&(i=ie.exec(n))&&i[1]&&(n=ce(e,t,i),o="number"),null!=n&&n==n&&("number"!==o||l||(n+=i&&i[3]||(T.cssNumber[a]?"":"px")),m.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,r))||(l?u.setProperty(t,n):u[t]=n))}},css:function(e,t,n,r){var i,o,s,a=Y(t);return Qe.test(t)||(t=Ye(a)),(s=T.cssHooks[t]||T.cssHooks[a])&&"get"in s&&(i=s.get(e,!0,n)),void 0===i&&(i=$e(e,t,r)),"normal"===i&&t in Ke&&(i=Ke[t]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),T.each(["height","width"],(function(e,t){T.cssHooks[t]={get:function(e,n,r){if(n)return!Ge.test(T.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?nt(e,t,r):Fe(e,Je,(function(){return nt(e,t,r)}))},set:function(e,n,r){var i,o=Re(e),s=!m.scrollboxSize()&&"absolute"===o.position,a=(s||r)&&"border-box"===T.css(e,"boxSizing",!1,o),l=r?tt(e,t,r,a,o):0;return a&&s&&(l-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(o[t])-tt(e,t,"border",!1,o)-.5)),l&&(i=ie.exec(n))&&"px"!==(i[3]||"px")&&(e.style[t]=n,n=T.css(e,t)),et(0,n,l)}}})),T.cssHooks.marginLeft=Ze(m.reliableMarginLeft,(function(e,t){if(t)return(parseFloat($e(e,"marginLeft"))||e.getBoundingClientRect().left-Fe(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),T.each({margin:"",padding:"",border:"Width"},(function(e,t){T.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[e+oe[r]+t]=o[r]||o[r-2]||o[0];return i}},"margin"!==e&&(T.cssHooks[e+t].set=et)})),T.fn.extend({css:function(e,t){return Z(this,(function(e,t,n){var r,i,o={},s=0;if(Array.isArray(t)){for(r=Re(e),i=t.length;s<i;s++)o[t[s]]=T.css(e,t[s],!1,r);return o}return void 0!==n?T.style(e,t,n):T.css(e,t)}),e,t,arguments.length>1)}}),T.Tween=rt,rt.prototype={constructor:rt,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||T.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(T.cssNumber[n]?"":"px")},cur:function(){var e=rt.propHooks[this.prop];return e&&e.get?e.get(this):rt.propHooks._default.get(this)},run:function(e){var t,n=rt.propHooks[this.prop];return this.options.duration?this.pos=t=T.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):rt.propHooks._default.set(this),this}},rt.prototype.init.prototype=rt.prototype,rt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=T.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){T.fx.step[e.prop]?T.fx.step[e.prop](e):1!==e.elem.nodeType||!T.cssHooks[e.prop]&&null==e.elem.style[Ye(e.prop)]?e.elem[e.prop]=e.now:T.style(e.elem,e.prop,e.now+e.unit)}}},rt.propHooks.scrollTop=rt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},T.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},T.fx=rt.prototype.init,T.fx.step={};var it,ot,st=/^(?:toggle|show|hide)$/,at=/queueHooks$/;function lt(){ot&&(!1===A.hidden&&r.requestAnimationFrame?r.requestAnimationFrame(lt):r.setTimeout(lt,T.fx.interval),T.fx.tick())}function ut(){return r.setTimeout((function(){it=void 0})),it=Date.now()}function ct(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)i["margin"+(n=oe[r])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function dt(e,t,n){for(var r,i=(pt.tweeners[t]||[]).concat(pt.tweeners["*"]),o=0,s=i.length;o<s;o++)if(r=i[o].call(n,t,e))return r}function pt(e,t,n){var r,i,o=0,s=pt.prefilters.length,a=T.Deferred().always((function(){delete l.elem})),l=function(){if(i)return!1;for(var t=it||ut(),n=Math.max(0,u.startTime+u.duration-t),r=1-(n/u.duration||0),o=0,s=u.tweens.length;o<s;o++)u.tweens[o].run(r);return a.notifyWith(e,[u,r,n]),r<1&&s?n:(s||a.notifyWith(e,[u,1,0]),a.resolveWith(e,[u]),!1)},u=a.promise({elem:e,props:T.extend({},t),opts:T.extend(!0,{specialEasing:{},easing:T.easing._default},n),originalProperties:t,originalOptions:n,startTime:it||ut(),duration:n.duration,tweens:[],createTween:function(t,n){var r=T.Tween(e,u.opts,t,n,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(r),r},stop:function(t){var n=0,r=t?u.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)u.tweens[n].run(1);return t?(a.notifyWith(e,[u,1,0]),a.resolveWith(e,[u,t])):a.rejectWith(e,[u,t]),this}}),c=u.props;for(function(e,t){var n,r,i,o,s;for(n in e)if(i=t[r=Y(n)],o=e[n],Array.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),(s=T.cssHooks[r])&&"expand"in s)for(n in o=s.expand(o),delete e[r],o)n in e||(e[n]=o[n],t[n]=i);else t[r]=i}(c,u.opts.specialEasing);o<s;o++)if(r=pt.prefilters[o].call(u,e,c,u.opts))return v(r.stop)&&(T._queueHooks(u.elem,u.opts.queue).stop=r.stop.bind(r)),r;return T.map(c,dt,u),v(u.opts.start)&&u.opts.start.call(e,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),T.fx.timer(T.extend(l,{elem:e,anim:u,queue:u.opts.queue})),u}T.Animation=T.extend(pt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ce(n.elem,e,ie.exec(t),n),n}]},tweener:function(e,t){v(e)?(t=e,e=["*"]):e=e.match(D);for(var n,r=0,i=e.length;r<i;r++)n=e[r],pt.tweeners[n]=pt.tweeners[n]||[],pt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,i,o,s,a,l,u,c,d="width"in t||"height"in t,p=this,f={},h=e.style,g=e.nodeType&&ue(e),m=J.get(e,"fxshow");for(r in n.queue||(null==(s=T._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,p.always((function(){p.always((function(){s.unqueued--,T.queue(e,"fx").length||s.empty.fire()}))}))),t)if(i=t[r],st.test(i)){if(delete t[r],o=o||"toggle"===i,i===(g?"hide":"show")){if("show"!==i||!m||void 0===m[r])continue;g=!0}f[r]=m&&m[r]||T.style(e,r)}if((l=!T.isEmptyObject(t))||!T.isEmptyObject(f))for(r in d&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(u=m&&m.display)&&(u=J.get(e,"display")),"none"===(c=T.css(e,"display"))&&(u?c=u:(fe([e],!0),u=e.style.display||u,c=T.css(e,"display"),fe([e]))),("inline"===c||"inline-block"===c&&null!=u)&&"none"===T.css(e,"float")&&(l||(p.done((function(){h.display=u})),null==u&&(c=h.display,u="none"===c?"":c)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",p.always((function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]}))),l=!1,f)l||(m?"hidden"in m&&(g=m.hidden):m=J.access(e,"fxshow",{display:u}),o&&(m.hidden=!g),g&&fe([e],!0),p.done((function(){for(r in g||fe([e]),J.remove(e,"fxshow"),f)T.style(e,r,f[r])}))),l=dt(g?m[r]:0,r,p),r in m||(m[r]=l.start,g&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?pt.prefilters.unshift(e):pt.prefilters.push(e)}}),T.speed=function(e,t,n){var r=e&&"object"==typeof e?T.extend({},e):{complete:n||!n&&t||v(e)&&e,duration:e,easing:n&&t||t&&!v(t)&&t};return T.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in T.fx.speeds?r.duration=T.fx.speeds[r.duration]:r.duration=T.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){v(r.old)&&r.old.call(this),r.queue&&T.dequeue(this,r.queue)},r},T.fn.extend({fadeTo:function(e,t,n,r){return this.filter(ue).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=T.isEmptyObject(e),o=T.speed(t,n,r),s=function(){var t=pt(this,T.extend({},e),o);(i||J.get(this,"finish"))&&t.stop(!0)};return s.finish=s,i||!1===o.queue?this.each(s):this.queue(o.queue,s)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each((function(){var t=!0,i=null!=e&&e+"queueHooks",o=T.timers,s=J.get(this);if(i)s[i]&&s[i].stop&&r(s[i]);else for(i in s)s[i]&&s[i].stop&&at.test(i)&&r(s[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));!t&&n||T.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=J.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=T.timers,s=r?r.length:0;for(n.finish=!0,T.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<s;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish}))}}),T.each(["toggle","show","hide"],(function(e,t){var n=T.fn[t];T.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ct(t,!0),e,r,i)}})),T.each({slideDown:ct("show"),slideUp:ct("hide"),slideToggle:ct("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){T.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}})),T.timers=[],T.fx.tick=function(){var e,t=0,n=T.timers;for(it=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||T.fx.stop(),it=void 0},T.fx.timer=function(e){T.timers.push(e),T.fx.start()},T.fx.interval=13,T.fx.start=function(){ot||(ot=!0,lt())},T.fx.stop=function(){ot=null},T.fx.speeds={slow:600,fast:200,_default:400},T.fn.delay=function(e,t){return e=T.fx&&T.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,n){var i=r.setTimeout(t,e);n.stop=function(){r.clearTimeout(i)}}))},function(){var e=A.createElement("input"),t=A.createElement("select").appendChild(A.createElement("option"));e.type="checkbox",m.checkOn=""!==e.value,m.optSelected=t.selected,(e=A.createElement("input")).value="t",e.type="radio",m.radioValue="t"===e.value}();var ft,ht=T.expr.attrHandle;T.fn.extend({attr:function(e,t){return Z(this,T.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){T.removeAttr(this,e)}))}}),T.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?T.prop(e,t,n):(1===o&&T.isXMLDoc(e)||(i=T.attrHooks[t.toLowerCase()]||(T.expr.match.bool.test(t)?ft:void 0)),void 0!==n?null===n?void T.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:null==(r=T.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!m.radioValue&&"radio"===t&&j(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(D);if(i&&1===e.nodeType)for(;n=i[r++];)e.removeAttribute(n)}}),ft={set:function(e,t,n){return!1===t?T.removeAttr(e,n):e.setAttribute(n,n),n}},T.each(T.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=ht[t]||T.find.attr;ht[t]=function(e,t,r){var i,o,s=t.toLowerCase();return r||(o=ht[s],ht[s]=i,i=null!=n(e,t,r)?s:null,ht[s]=o),i}}));var gt=/^(?:input|select|textarea|button)$/i,mt=/^(?:a|area)$/i;function vt(e){return(e.match(D)||[]).join(" ")}function yt(e){return e.getAttribute&&e.getAttribute("class")||""}function At(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(D)||[]}T.fn.extend({prop:function(e,t){return Z(this,T.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[T.propFix[e]||e]}))}}),T.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&T.isXMLDoc(e)||(t=T.propFix[t]||t,i=T.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=T.find.attr(e,"tabindex");return t?parseInt(t,10):gt.test(e.nodeName)||mt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),m.optSelected||(T.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),T.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){T.propFix[this.toLowerCase()]=this})),T.fn.extend({addClass:function(e){var t,n,r,i,o,s,a,l=0;if(v(e))return this.each((function(t){T(this).addClass(e.call(this,t,yt(this)))}));if((t=At(e)).length)for(;n=this[l++];)if(i=yt(n),r=1===n.nodeType&&" "+vt(i)+" "){for(s=0;o=t[s++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");i!==(a=vt(r))&&n.setAttribute("class",a)}return this},removeClass:function(e){var t,n,r,i,o,s,a,l=0;if(v(e))return this.each((function(t){T(this).removeClass(e.call(this,t,yt(this)))}));if(!arguments.length)return this.attr("class","");if((t=At(e)).length)for(;n=this[l++];)if(i=yt(n),r=1===n.nodeType&&" "+vt(i)+" "){for(s=0;o=t[s++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");i!==(a=vt(r))&&n.setAttribute("class",a)}return this},toggleClass:function(e,t){var n=typeof e,r="string"===n||Array.isArray(e);return"boolean"==typeof t&&r?t?this.addClass(e):this.removeClass(e):v(e)?this.each((function(n){T(this).toggleClass(e.call(this,n,yt(this),t),t)})):this.each((function(){var t,i,o,s;if(r)for(i=0,o=T(this),s=At(e);t=s[i++];)o.hasClass(t)?o.removeClass(t):o.addClass(t);else void 0!==e&&"boolean"!==n||((t=yt(this))&&J.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":J.get(this,"__className__")||""))}))},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+vt(yt(n))+" ").indexOf(t)>-1)return!0;return!1}});var bt=/\r/g;T.fn.extend({val:function(e){var t,n,r,i=this[0];return arguments.length?(r=v(e),this.each((function(n){var i;1===this.nodeType&&(null==(i=r?e.call(this,n,T(this).val()):e)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=T.map(i,(function(e){return null==e?"":e+""}))),(t=T.valHooks[this.type]||T.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))}))):i?(t=T.valHooks[i.type]||T.valHooks[i.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(bt,""):null==n?"":n:void 0}}),T.extend({valHooks:{option:{get:function(e){var t=T.find.attr(e,"value");return null!=t?t:vt(T.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,s="select-one"===e.type,a=s?null:[],l=s?o+1:i.length;for(r=o<0?l:s?o:0;r<l;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!j(n.parentNode,"optgroup"))){if(t=T(n).val(),s)return t;a.push(t)}return a},set:function(e,t){for(var n,r,i=e.options,o=T.makeArray(t),s=i.length;s--;)((r=i[s]).selected=T.inArray(T.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),T.each(["radio","checkbox"],(function(){T.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=T.inArray(T(e).val(),t)>-1}},m.checkOn||(T.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),m.focusin="onfocusin"in r;var xt=/^(?:focusinfocus|focusoutblur)$/,Ct=function(e){e.stopPropagation()};T.extend(T.event,{trigger:function(e,t,n,i){var o,s,a,l,u,c,d,p,h=[n||A],g=f.call(e,"type")?e.type:e,m=f.call(e,"namespace")?e.namespace.split("."):[];if(s=p=a=n=n||A,3!==n.nodeType&&8!==n.nodeType&&!xt.test(g+T.event.triggered)&&(g.indexOf(".")>-1&&(m=g.split("."),g=m.shift(),m.sort()),u=g.indexOf(":")<0&&"on"+g,(e=e[T.expando]?e:new T.Event(g,"object"==typeof e&&e)).isTrigger=i?2:3,e.namespace=m.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:T.makeArray(t,[e]),d=T.event.special[g]||{},i||!d.trigger||!1!==d.trigger.apply(n,t))){if(!i&&!d.noBubble&&!y(n)){for(l=d.delegateType||g,xt.test(l+g)||(s=s.parentNode);s;s=s.parentNode)h.push(s),a=s;a===(n.ownerDocument||A)&&h.push(a.defaultView||a.parentWindow||r)}for(o=0;(s=h[o++])&&!e.isPropagationStopped();)p=s,e.type=o>1?l:d.bindType||g,(c=(J.get(s,"events")||Object.create(null))[e.type]&&J.get(s,"handle"))&&c.apply(s,t),(c=u&&s[u])&&c.apply&&G(s)&&(e.result=c.apply(s,t),!1===e.result&&e.preventDefault());return e.type=g,i||e.isDefaultPrevented()||d._default&&!1!==d._default.apply(h.pop(),t)||!G(n)||u&&v(n[g])&&!y(n)&&((a=n[u])&&(n[u]=null),T.event.triggered=g,e.isPropagationStopped()&&p.addEventListener(g,Ct),n[g](),e.isPropagationStopped()&&p.removeEventListener(g,Ct),T.event.triggered=void 0,a&&(n[u]=a)),e.result}},simulate:function(e,t,n){var r=T.extend(new T.Event,n,{type:e,isSimulated:!0});T.event.trigger(r,null,t)}}),T.fn.extend({trigger:function(e,t){return this.each((function(){T.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return T.event.trigger(e,t,n,!0)}}),m.focusin||T.each({focus:"focusin",blur:"focusout"},(function(e,t){var n=function(e){T.event.simulate(t,e.target,T.event.fix(e))};T.event.special[t]={setup:function(){var r=this.ownerDocument||this.document||this,i=J.access(r,t);i||r.addEventListener(e,n,!0),J.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this.document||this,i=J.access(r,t)-1;i?J.access(r,t,i):(r.removeEventListener(e,n,!0),J.remove(r,t))}}}));var wt=r.location,Tt={guid:Date.now()},kt=/\?/;T.parseXML=function(e){var t,n;if(!e||"string"!=typeof e)return null;try{t=(new r.DOMParser).parseFromString(e,"text/xml")}catch(e){}return n=t&&t.getElementsByTagName("parsererror")[0],t&&!n||T.error("Invalid XML: "+(n?T.map(n.childNodes,(function(e){return e.textContent})).join("\n"):e)),t};var St=/\[\]$/,Et=/\r?\n/g,_t=/^(?:submit|button|image|reset|file)$/i,Vt=/^(?:input|select|textarea|keygen)/i;function jt(e,t,n,r){var i;if(Array.isArray(t))T.each(t,(function(t,i){n||St.test(e)?r(e,i):jt(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,n,r)}));else if(n||"object"!==C(t))r(e,t);else for(i in t)jt(e+"["+i+"]",t[i],n,r)}T.param=function(e,t){var n,r=[],i=function(e,t){var n=v(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!T.isPlainObject(e))T.each(e,(function(){i(this.name,this.value)}));else for(n in e)jt(n,e[n],t,i);return r.join("&")},T.fn.extend({serialize:function(){return T.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=T.prop(this,"elements");return e?T.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!T(this).is(":disabled")&&Vt.test(this.nodeName)&&!_t.test(e)&&(this.checked||!me.test(e))})).map((function(e,t){var n=T(this).val();return null==n?null:Array.isArray(n)?T.map(n,(function(e){return{name:t.name,value:e.replace(Et,"\r\n")}})):{name:t.name,value:n.replace(Et,"\r\n")}})).get()}});var Nt=/%20/g,It=/#.*$/,Ot=/([?&])_=[^&]*/,Mt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Lt=/^(?:GET|HEAD)$/,Bt=/^\/\//,Ht={},Dt={},qt="*/".concat("*"),Pt=A.createElement("a");function Rt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(D)||[];if(v(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function Ft(e,t,n,r){var i={},o=e===Dt;function s(a){var l;return i[a]=!0,T.each(e[a]||[],(function(e,a){var u=a(t,n,r);return"string"!=typeof u||o||i[u]?o?!(l=u):void 0:(t.dataTypes.unshift(u),s(u),!1)})),l}return s(t.dataTypes[0])||!i["*"]&&s("*")}function Wt(e,t){var n,r,i=T.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&T.extend(!0,e,r),e}Pt.href=wt.href,T.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:wt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(wt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":qt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":T.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Wt(Wt(e,T.ajaxSettings),t):Wt(T.ajaxSettings,e)},ajaxPrefilter:Rt(Ht),ajaxTransport:Rt(Dt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var n,i,o,s,a,l,u,c,d,p,f=T.ajaxSetup({},t),h=f.context||f,g=f.context&&(h.nodeType||h.jquery)?T(h):T.event,m=T.Deferred(),v=T.Callbacks("once memory"),y=f.statusCode||{},b={},x={},C="canceled",w={readyState:0,getResponseHeader:function(e){var t;if(u){if(!s)for(s={};t=Mt.exec(o);)s[t[1].toLowerCase()+" "]=(s[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=s[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return u?o:null},setRequestHeader:function(e,t){return null==u&&(e=x[e.toLowerCase()]=x[e.toLowerCase()]||e,b[e]=t),this},overrideMimeType:function(e){return null==u&&(f.mimeType=e),this},statusCode:function(e){var t;if(e)if(u)w.always(e[w.status]);else for(t in e)y[t]=[y[t],e[t]];return this},abort:function(e){var t=e||C;return n&&n.abort(t),k(0,t),this}};if(m.promise(w),f.url=((e||f.url||wt.href)+"").replace(Bt,wt.protocol+"//"),f.type=t.method||t.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match(D)||[""],null==f.crossDomain){l=A.createElement("a");try{l.href=f.url,l.href=l.href,f.crossDomain=Pt.protocol+"//"+Pt.host!=l.protocol+"//"+l.host}catch(e){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=T.param(f.data,f.traditional)),Ft(Ht,f,t,w),u)return w;for(d in(c=T.event&&f.global)&&0==T.active++&&T.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!Lt.test(f.type),i=f.url.replace(It,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace(Nt,"+")):(p=f.url.slice(i.length),f.data&&(f.processData||"string"==typeof f.data)&&(i+=(kt.test(i)?"&":"?")+f.data,delete f.data),!1===f.cache&&(i=i.replace(Ot,"$1"),p=(kt.test(i)?"&":"?")+"_="+Tt.guid+++p),f.url=i+p),f.ifModified&&(T.lastModified[i]&&w.setRequestHeader("If-Modified-Since",T.lastModified[i]),T.etag[i]&&w.setRequestHeader("If-None-Match",T.etag[i])),(f.data&&f.hasContent&&!1!==f.contentType||t.contentType)&&w.setRequestHeader("Content-Type",f.contentType),w.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+qt+"; q=0.01":""):f.accepts["*"]),f.headers)w.setRequestHeader(d,f.headers[d]);if(f.beforeSend&&(!1===f.beforeSend.call(h,w,f)||u))return w.abort();if(C="abort",v.add(f.complete),w.done(f.success),w.fail(f.error),n=Ft(Dt,f,t,w)){if(w.readyState=1,c&&g.trigger("ajaxSend",[w,f]),u)return w;f.async&&f.timeout>0&&(a=r.setTimeout((function(){w.abort("timeout")}),f.timeout));try{u=!1,n.send(b,k)}catch(e){if(u)throw e;k(-1,e)}}else k(-1,"No Transport");function k(e,t,s,l){var d,p,A,b,x,C=t;u||(u=!0,a&&r.clearTimeout(a),n=void 0,o=l||"",w.readyState=e>0?4:0,d=e>=200&&e<300||304===e,s&&(b=function(e,t,n){for(var r,i,o,s,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in a)if(a[i]&&a[i].test(r)){l.unshift(i);break}if(l[0]in n)o=l[0];else{for(i in n){if(!l[0]||e.converters[i+" "+l[0]]){o=i;break}s||(s=i)}o=o||s}if(o)return o!==l[0]&&l.unshift(o),n[o]}(f,w,s)),!d&&T.inArray("script",f.dataTypes)>-1&&T.inArray("json",f.dataTypes)<0&&(f.converters["text script"]=function(){}),b=function(e,t,n,r){var i,o,s,a,l,u={},c=e.dataTypes.slice();if(c[1])for(s in e.converters)u[s.toLowerCase()]=e.converters[s];for(o=c.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!l&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=c.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(s=u[l+" "+o]||u["* "+o]))for(i in u)if((a=i.split(" "))[1]===o&&(s=u[l+" "+a[0]]||u["* "+a[0]])){!0===s?s=u[i]:!0!==u[i]&&(o=a[0],c.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}(f,b,w,d),d?(f.ifModified&&((x=w.getResponseHeader("Last-Modified"))&&(T.lastModified[i]=x),(x=w.getResponseHeader("etag"))&&(T.etag[i]=x)),204===e||"HEAD"===f.type?C="nocontent":304===e?C="notmodified":(C=b.state,p=b.data,d=!(A=b.error))):(A=C,!e&&C||(C="error",e<0&&(e=0))),w.status=e,w.statusText=(t||C)+"",d?m.resolveWith(h,[p,C,w]):m.rejectWith(h,[w,C,A]),w.statusCode(y),y=void 0,c&&g.trigger(d?"ajaxSuccess":"ajaxError",[w,f,d?p:A]),v.fireWith(h,[w,C]),c&&(g.trigger("ajaxComplete",[w,f]),--T.active||T.event.trigger("ajaxStop")))}return w},getJSON:function(e,t,n){return T.get(e,t,n,"json")},getScript:function(e,t){return T.get(e,void 0,t,"script")}}),T.each(["get","post"],(function(e,t){T[t]=function(e,n,r,i){return v(n)&&(i=i||r,r=n,n=void 0),T.ajax(T.extend({url:e,type:t,dataType:i,data:n,success:r},T.isPlainObject(e)&&e))}})),T.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),T._evalUrl=function(e,t,n){return T.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){T.globalEval(e,t,n)}})},T.fn.extend({wrapAll:function(e){var t;return this[0]&&(v(e)&&(e=e.call(this[0])),t=T(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return v(e)?this.each((function(t){T(this).wrapInner(e.call(this,t))})):this.each((function(){var t=T(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=v(e);return this.each((function(n){T(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){T(this).replaceWith(this.childNodes)})),this}}),T.expr.pseudos.hidden=function(e){return!T.expr.pseudos.visible(e)},T.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},T.ajaxSettings.xhr=function(){try{return new r.XMLHttpRequest}catch(e){}};var $t={0:200,1223:204},Zt=T.ajaxSettings.xhr();m.cors=!!Zt&&"withCredentials"in Zt,m.ajax=Zt=!!Zt,T.ajaxTransport((function(e){var t,n;if(m.cors||Zt&&!e.crossDomain)return{send:function(i,o){var s,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(s in e.xhrFields)a[s]=e.xhrFields[s];for(s in e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest"),i)a.setRequestHeader(s,i[s]);t=function(e){return function(){t&&(t=n=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?o(0,"error"):o(a.status,a.statusText):o($t[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=t(),n=a.onerror=a.ontimeout=t("error"),void 0!==a.onabort?a.onabort=n:a.onreadystatechange=function(){4===a.readyState&&r.setTimeout((function(){t&&n()}))},t=t("abort");try{a.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}})),T.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),T.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return T.globalEval(e),e}}}),T.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),T.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(r,i){t=T("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&i("error"===e.type?404:200,e.type)}),A.head.appendChild(t[0])},abort:function(){n&&n()}}}));var Ut,zt=[],Xt=/(=)\?(?=&|$)|\?\?/;T.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=zt.pop()||T.expando+"_"+Tt.guid++;return this[e]=!0,e}}),T.ajaxPrefilter("json jsonp",(function(e,t,n){var i,o,s,a=!1!==e.jsonp&&(Xt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Xt.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return i=e.jsonpCallback=v(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Xt,"$1"+i):!1!==e.jsonp&&(e.url+=(kt.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return s||T.error(i+" was not called"),s[0]},e.dataTypes[0]="json",o=r[i],r[i]=function(){s=arguments},n.always((function(){void 0===o?T(r).removeProp(i):r[i]=o,e[i]&&(e.jsonpCallback=t.jsonpCallback,zt.push(i)),s&&v(o)&&o(s[0]),s=o=void 0})),"script"})),m.createHTMLDocument=((Ut=A.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Ut.childNodes.length),T.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(m.createHTMLDocument?((r=(t=A.implementation.createHTMLDocument("")).createElement("base")).href=A.location.href,t.head.appendChild(r)):t=A),o=!n&&[],(i=N.exec(e))?[t.createElement(i[1])]:(i=we([e],t,o),o&&o.length&&T(o).remove(),T.merge([],i.childNodes)));var r,i,o},T.fn.load=function(e,t,n){var r,i,o,s=this,a=e.indexOf(" ");return a>-1&&(r=vt(e.slice(a)),e=e.slice(0,a)),v(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),s.length>0&&T.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done((function(e){o=arguments,s.html(r?T("<div>").append(T.parseHTML(e)).find(r):e)})).always(n&&function(e,t){s.each((function(){n.apply(this,o||[e.responseText,t,e])}))}),this},T.expr.pseudos.animated=function(e){return T.grep(T.timers,(function(t){return e===t.elem})).length},T.offset={setOffset:function(e,t,n){var r,i,o,s,a,l,u=T.css(e,"position"),c=T(e),d={};"static"===u&&(e.style.position="relative"),a=c.offset(),o=T.css(e,"top"),l=T.css(e,"left"),("absolute"===u||"fixed"===u)&&(o+l).indexOf("auto")>-1?(s=(r=c.position()).top,i=r.left):(s=parseFloat(o)||0,i=parseFloat(l)||0),v(t)&&(t=t.call(e,n,T.extend({},a))),null!=t.top&&(d.top=t.top-a.top+s),null!=t.left&&(d.left=t.left-a.left+i),"using"in t?t.using.call(e,d):c.css(d)}},T.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){T.offset.setOffset(this,e,t)}));var t,n,r=this[0];return r?r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if("fixed"===T.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===T.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=T(e).offset()).top+=T.css(e,"borderTopWidth",!0),i.left+=T.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-T.css(r,"marginTop",!0),left:t.left-i.left-T.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===T.css(e,"position");)e=e.offsetParent;return e||se}))}}),T.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;T.fn[e]=function(r){return Z(this,(function(e,r,i){var o;if(y(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===i)return o?o[t]:e[r];o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):e[r]=i}),e,r,arguments.length)}})),T.each(["top","left"],(function(e,t){T.cssHooks[t]=Ze(m.pixelPosition,(function(e,n){if(n)return n=$e(e,t),Pe.test(n)?T(e).position()[t]+"px":n}))})),T.each({Height:"height",Width:"width"},(function(e,t){T.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,r){T.fn[r]=function(i,o){var s=arguments.length&&(n||"boolean"!=typeof i),a=n||(!0===i||!0===o?"margin":"border");return Z(this,(function(t,n,i){var o;return y(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===i?T.css(t,n,a):T.style(t,n,i,a)}),t,s?i:void 0,s)}}))})),T.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){T.fn[t]=function(e){return this.on(t,e)}})),T.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),T.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){T.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}));var Yt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;T.proxy=function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),v(e))return r=a.call(arguments,2),i=function(){return e.apply(t||this,r.concat(a.call(arguments)))},i.guid=e.guid=e.guid||T.guid++,i},T.holdReady=function(e){e?T.readyWait++:T.ready(!0)},T.isArray=Array.isArray,T.parseJSON=JSON.parse,T.nodeName=j,T.isFunction=v,T.isWindow=y,T.camelCase=Y,T.type=C,T.now=Date.now,T.isNumeric=function(e){var t=T.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},T.trim=function(e){return null==e?"":(e+"").replace(Yt,"")},void 0===(n=function(){return T}.apply(t,[]))||(e.exports=n);var Gt=r.jQuery,Qt=r.$;return T.noConflict=function(e){return r.$===T&&(r.$=Qt),e&&r.jQuery===T&&(r.jQuery=Gt),T},void 0===i&&(r.jQuery=r.$=T),T}))},526:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>v});var r=n(892),i=n.n(r),o=n(760),s=n.n(o),a=n(311),l=n.n(a),u=n(192),c=n.n(u),d=n(60),p=n.n(d),f=n(865),h=n.n(f),g=n(849),m={};m.styleTagTransform=h(),m.setAttributes=c(),m.insert=l().bind(null,"head"),m.domAPI=s(),m.insertStyleElement=p(),i()(g.Z,m);const v=g.Z&&g.Z.locals?g.Z.locals:void 0},912:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>v});var r=n(892),i=n.n(r),o=n(760),s=n.n(o),a=n(311),l=n.n(a),u=n(192),c=n.n(u),d=n(60),p=n.n(d),f=n(865),h=n.n(f),g=n(466),m={};m.styleTagTransform=h(),m.setAttributes=c(),m.insert=l().bind(null,"head"),m.domAPI=s(),m.insertStyleElement=p(),i()(g.Z,m);const v=g.Z&&g.Z.locals?g.Z.locals:void 0},892:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},s=[],a=0;a<e.length;a++){var l=e[a],u=r.base?l[0]+r.base:l[0],c=o[u]||0,d="".concat(u," ").concat(c);o[u]=c+1;var p=n(d),f={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)t[p].references++,t[p].updater(f);else{var h=i(f,r);r.byIndex=a,t.splice(a,0,{identifier:d,updater:h,references:1})}s.push(d)}return s}function i(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,i){var o=r(e=e||[],i=i||{});return function(e){e=e||[];for(var s=0;s<o.length;s++){var a=n(o[s]);t[a].references--}for(var l=r(e,i),u=0;u<o.length;u++){var c=n(o[u]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}o=l}}},311:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},60:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},192:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},760:e=>{"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,i&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},865:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},932:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e){this.firstValue=document.getElementById(e.firstValue),this.secondValue=document.getElementById(e.secondValue),this.maxValue=document.getElementById(e.max),this.minValue=document.getElementById(e.min),this.step=document.getElementById(e.step),this.range=document.getElementById(e.range),this.verticalMode=document.getElementById(e.verticalMode),this.currentValueVisible=document.getElementById(e.currentValueVisible)}return e.prototype.changeFirstValue=function(e){e.changeFirstValue(this.firstValue.value),this.firstValue.value!==e.getModel.getOptions.value.toString()&&(this.firstValue.value=e.getModel.getOptions.value.toString())},e.prototype.changeSecondValue=function(e){e.changeSecondValue(this.secondValue.value),this.secondValue.value!==e.getModel.getOptions.value2.toString()&&(this.secondValue.value=e.getModel.getOptions.value2.toString())},e.prototype.changeMinValue=function(e){var t=e.changeMinValue(this.minValue.value);""!==t&&this.manageError(t,this.minValue),this.minValue.value=e.getModel.getOptions.min.toString(),"true"==e.getModel.getOptions.range?e.getModel.getOptions.min>parseFloat(this.secondValue.value)&&(this.secondValue.value=e.getModel.getOptions.min.toString()):e.getModel.getOptions.min>parseFloat(this.firstValue.value)&&(this.firstValue.value=e.getModel.getOptions.min.toString())},e.prototype.changeStep=function(e){var t=e.changeStep(this.step.value);""!==t&&this.manageError(t,this.step),this.step.value=e.getModel.getOptions.step.toString()},e.prototype.changeMaxValue=function(e){var t=e.changeMaxValue(this.maxValue.value);""!==t&&this.manageError(t,this.maxValue),this.maxValue.value=e.getModel.getOptions.max.toString(),e.getModel.getOptions.max<parseFloat(this.firstValue.value)&&(this.firstValue.value=e.getModel.getOptions.max.toString())},e.prototype.manageError=function(e,t){var n=this.showError(e,t);setTimeout((function(){return n.style.opacity="0.7"}),1e3),setTimeout((function(){return n.style.opacity="0.4"}),2e3),setTimeout((function(){return n.remove()}),3e3)},e.prototype.showError=function(e,t){var n,r=document.createElement("p");return r.textContent=e,r.classList.add("config__error"),null===(n=t.parentElement)||void 0===n||n.append(r),r},e.prototype.addEventListeners=function(e){var t=this;this.firstValue.addEventListener("change",(function(){return t.changeFirstValue(e)})),this.secondValue.addEventListener("change",(function(){return t.changeSecondValue(e)})),this.maxValue.addEventListener("change",(function(){return t.changeMaxValue(e)})),this.minValue.addEventListener("change",(function(){return t.changeMinValue(e)})),this.range.addEventListener("change",(function(){return e.changeRange(t.range.value)})),this.step.addEventListener("change",(function(){return t.changeStep(e)})),this.verticalMode.addEventListener("change",(function(){return e.changeMode(t.verticalMode.checked)})),this.currentValueVisible.addEventListener("change",(function(){return e.changeVisabilityOfValues(t.currentValueVisible.checked)}))},e.prototype.setPanel=function(e){var t;this.range.value=e.range,this.step.value=e.step.toString(),this.maxValue.value=e.max.toString(),this.minValue.value=e.min.toString(),this.firstValue.value=e.value.toString(),this.verticalMode.checked=null!==(t=e.isVertical)&&void 0!==t&&t,"true"===e.range&&(this.secondValue.value=e.value2.toString())},e.prototype.addObservers=function(e){e.getView.addObserver(this.valueChangedInputListener.bind(this))},e.prototype.valueChangedInputListener=function(e){"firstHandle"!==e.key&&"progressBarFirst"!==e.key?"secondHandle"!==e.key&&"progressBarSecond"!==e.key||(this.secondValue.value=e.value2.toString()):this.firstValue.value=e.value.toString()},Object.defineProperty(e.prototype,"getFirstValue",{get:function(){return this.firstValue},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"getSecondValue",{get:function(){return this.secondValue},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"getMaxValue",{get:function(){return this.maxValue},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"getMinValue",{get:function(){return this.minValue},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"getRange",{get:function(){return this.range},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"getStep",{get:function(){return this.step},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"getVerticalMode",{get:function(){return this.verticalMode},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"getCurrentValueVisible",{get:function(){return this.currentValueVisible},enumerable:!1,configurable:!0}),e}();t.default=n},190:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(638));n(526),n(366),n(912);var o=r(n(932));({init:function(){var e=(0,i.default)("#slider-1").ngSlider({range:"true",id:"slider-1",max:9,min:2,isValueVisible:!0,value:2,step:.1,isVertical:!1}),t=new o.default({firstValue:"first-value1",secondValue:"second-value1",min:"min1",max:"max1",range:"range1",step:"step1",verticalMode:"vertical-button1",currentValueVisible:"current-value-visible-button1"}),n=(0,i.default)("#slider-2").ngSlider({range:"max",id:"slider-2",max:21,min:6,isValueVisible:!0,value:10,step:3,isVertical:!0}),r=new o.default({firstValue:"first-value2",secondValue:"second-value2",min:"min2",max:"max2",range:"range2",step:"step2",verticalMode:"vertical-button2",currentValueVisible:"current-value-visible-button2"}),s=(0,i.default)("#slider-3").ngSlider({range:"min",id:"slider-3",max:180,min:120,isValueVisible:!0,value:170,step:10,isVertical:!1}),a=new o.default({firstValue:"first-value3",secondValue:"second-value3",min:"min3",max:"max3",range:"range3",step:"step3",verticalMode:"vertical-button3",currentValueVisible:"current-value-visible-button3"}),l=(0,i.default)("#slider-4").ngSlider({range:"",id:"slider-4",max:10,min:0,isValueVisible:!0,value:6,step:1,isVertical:!0}),u=new o.default({firstValue:"first-value4",secondValue:"second-value4",min:"min4",max:"max4",range:"range4",step:"step4",verticalMode:"vertical-button4",currentValueVisible:"current-value-visible-button4"});this.set(e,t),this.set(n,r),this.set(s,a),this.set(l,u)},set:function(e,t){t.addEventListeners(e),t.setPanel(e.getModel.getOptions),t.addObservers(e)}}).init()},650:function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var s=function(e){function t(t){var n=e.call(this)||this;return n.countDecimals=function(e){return e.toString().includes(".")?e.toString().split(".")[1].length:0},n.options=t,n}return i(t,e),t.prototype.validateOptions=function(){var e=this.countDecimals(this.options.step);if((this.options.max-this.options.min)*Math.pow(10,e)%(this.options.step*Math.pow(10,e))!=0)throw new Error(this.options.step+" is incorrect step for "+this.options.id);if(void 0===this.options.max)throw new Error("Max value should be defined");if(void 0===this.options.min)throw new Error("Min value should be defined");if(this.options.min>=this.options.max)throw new Error("Min value should be less than max one");if(void 0===this.options.step||this.options.step<=0)throw new Error("Step should be defined and correct");if(void 0===this.options.id)throw new Error("Id should be defined");(!this.options.value2||this.options.value2<this.options.min||this.options.value2>this.options.max)&&(this.options.value2=this.options.min),(this.options.value>this.options.max||this.options.value<this.options.min||"true"===this.options.range&&this.options.value2>=this.options.value)&&(this.options.value=this.options.max)},t.prototype.setCords=function(e,t){this.options.startCord=e,this.options.endCord=t},t.prototype.calcValue=function(){var e=(this.options.currentCord-this.options.startCord)*(this.options.max-this.options.min)/(this.options.endCord-this.options.startCord)+this.options.min,t=this.countDecimals(this.options.step);if((e-this.options.min)*Math.pow(10,t)%(this.options.step*Math.pow(10,t))>this.options.step*Math.pow(10,t)/2?e=e-(e-this.options.min)*Math.pow(10,t)%(this.options.step*Math.pow(10,t))/Math.pow(10,t)+this.options.step:e-=(e-this.options.min)*Math.pow(10,t)%(this.options.step*Math.pow(10,t))/Math.pow(10,t),(e=parseFloat(e.toFixed(t)))>=this.options.min&&e<=this.options.max)if("secondHandle"===this.options.key){if(e>=this.options.value)return;this.options.value2=e}else{if("true"===this.options.range&&e<=this.options.value2)return;this.options.value=e}},t.prototype.changeFirstValue=function(e){var t=this.countDecimals(this.options.step),n=(e-this.options.min)%this.options.step>this.options.step/2;"true"===this.options.range&&this.options.value2?e>=this.options.max?e=this.options.max:e<=this.options.value2+this.options.step?e=this.options.value2+this.options.step:n?e=e-(e-this.options.min)%this.options.step+this.options.step:e-=(e-this.options.min)%this.options.step:e>=this.options.max?e=this.options.max:e<=this.options.min?e=this.options.min:n?e=e-(e-this.options.min)%this.options.step+this.options.step:e-=(e-this.options.min)%this.options.step,this.options.value=parseFloat(e.toFixed(t))},t.prototype.changeSecondValue=function(e){var t=this.countDecimals(this.options.step),n=(e-this.options.min)%this.options.step>this.options.step/2;"true"===this.options.range&&(e<=this.options.min?e=this.options.min:e>=this.options.value-this.options.step?e=this.options.value-this.options.step:n?e=e-(e-this.options.min)%this.options.step+this.options.step:e-=(e-this.options.min)%this.options.step,this.options.value2=parseFloat(e.toFixed(t)))},t.prototype.setMaxValue=function(e){if(e>this.options.min){var t=this.countDecimals(this.options.step);return(e-this.options.min)*Math.pow(10,t)%(this.options.step*Math.pow(10,t))==0?(this.options.max=e,this.options.value>this.options.max&&(this.options.value=this.options.max),"true"===this.options.range&&this.options.value2>this.options.max&&(this.options.value2=this.options.min),""):"Difference between max and min values should be multiplier of the step"}return"Max value should be more than min one"},t.prototype.setMinValue=function(e){if(e<this.options.max){var t=this.countDecimals(this.options.step);return(this.options.max-e)*Math.pow(10,t)%(this.options.step*Math.pow(10,t))==0?(this.options.min=e,"true"===this.options.range&&this.options.value2<this.options.min?this.options.value2=this.options.min:this.options.value<this.options.min&&(this.options.value=this.options.min),""):"Difference between max and min values should be multiplier of the step"}return"Min value should be less than max one"},t.prototype.setStep=function(e){var t=this.countDecimals(e);return(this.options.max-this.options.min)*Math.pow(10,t)%(e*Math.pow(10,t))==0?(this.options.step=e,""):"Difference between max and min values should be multiplier of the step"},t.prototype.setRange=function(e){this.options.range="min"===e||"max"===e||"true"===e?e:"false"},t.prototype.setVisability=function(e){this.options.isValueVisible=e},t.prototype.setVerticalMode=function(e){this.options.isVertical=e},Object.defineProperty(t.prototype,"getOptions",{get:function(){return this.options},enumerable:!1,configurable:!0}),t}(o(n(287)).default);t.default=s},287:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){this.observers=[]}return e.prototype.addObserver=function(e){this.observers.push(e)},e.prototype.removeObserver=function(e){var t=this;this.observers.forEach((function(n,r){n.toString()===e.toString()&&t.observers.splice(r,1)}))},e.prototype.notifyObservers=function(e){this.observers.forEach((function(t){t(e)}))},e}();t.default=n},975:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){this.view=e,this.model=t}return Object.defineProperty(e.prototype,"getModel",{get:function(){return this.model},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"getView",{get:function(){return this.view},enumerable:!1,configurable:!0}),e.prototype.onInit=function(){this.model.validateOptions(),this.view.addObserver(this.handleInputListener.bind(this)),this.view.addObserver(this.progressBarClickListener.bind(this)),this.model.getOptions.isVertical?(this.view.makeVertical(),this.model.setCords(this.view.getSlider.getBoundingClientRect().top,this.view.getSlider.getBoundingClientRect().bottom)):this.model.setCords(this.view.getSlider.getBoundingClientRect().left,this.view.getSlider.getBoundingClientRect().right),this.view.displaySlider(this.model.getOptions),this.view.setHandles(this.model.getOptions)},e.prototype.handleInputListener=function(e){"firstHandle"!==e.key&&"secondHandle"!==e.key||(this.model.calcValue(),this.updateSlider())},e.prototype.progressBarClickListener=function(e){"progressBarFirst"!==e.key&&"progressBarSecond"!==e.key||this.updateSlider()},e.prototype.changeFirstValue=function(e){"string"!=typeof e||isNaN(parseFloat(e))?"number"!=typeof e||isNaN(e)||this.model.changeFirstValue(e):this.model.changeFirstValue(parseFloat(e)),this.model.getOptions.key="firstHandle",this.updateSlider()},e.prototype.changeSecondValue=function(e){"string"!=typeof e||isNaN(parseFloat(e))?"number"!=typeof e||isNaN(e)||this.getModel.changeSecondValue(e):this.getModel.changeSecondValue(parseFloat(e)),this.model.getOptions.key="secondHandle",this.updateSlider()},e.prototype.changeMaxValue=function(e){var t="";return"string"!=typeof e||isNaN(parseFloat(e))?"number"!=typeof e||isNaN(e)||(t=this.getModel.setMaxValue(e)):t=this.getModel.setMaxValue(parseFloat(e)),this.rewriteSlider(),t},e.prototype.changeMinValue=function(e){var t="";return"string"!=typeof e||isNaN(parseFloat(e))?"number"!=typeof e||isNaN(e)||(t=this.getModel.setMinValue(e)):t=this.getModel.setMinValue(parseFloat(e)),this.rewriteSlider(),t},e.prototype.changeStep=function(e){var t="";return"string"!=typeof e||isNaN(parseFloat(e))?"number"!=typeof e||isNaN(e)||(t=this.getModel.setStep(e)):t=this.getModel.setStep(parseFloat(e)),this.rewriteSlider(),t},e.prototype.changeRange=function(e){this.model.setRange(e),"true"!==e&&"max"!==e&&"min"!==e&&this.view.getViewElements.sliderTrack.hide(),this.rewriteSlider()},e.prototype.changeMode=function(e){e?(this.view.makeVertical(),this.model.setCords(this.view.getSlider.getBoundingClientRect().top,this.view.getSlider.getBoundingClientRect().bottom)):(this.view.makeHorizontal(),this.model.setCords(this.view.getSlider.getBoundingClientRect().left,this.view.getSlider.getBoundingClientRect().right)),this.model.setVerticalMode(e),this.rewriteSlider()},e.prototype.changeVisabilityOfValues=function(e){this.model.setVisability(e),this.rewriteSlider()},e.prototype.rewriteSlider=function(){this.view.destroySlider(),this.view.displaySlider(this.model.getOptions)},e.prototype.updateSlider=function(){this.view.changeValue(this.model.getOptions),this.view.getViewElements.sliderTrack.fillWithColor(this.model.getOptions)},e}();t.default=n},942:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){this.labels=document.createElement("div"),this.values=[]}return e.prototype.create=function(e,t){this.labels.classList.add("ng-slider__values");for(var n,r=(n=t.step).toString().includes(".")?n.toString().split(".")[1].length:0,i=t.step;(t.max-t.min)/i>7;)i*=2;i=parseFloat(i.toFixed(r));for(var o=t.min;o<=t.max;o=parseFloat((o+i).toFixed(r)))this.createLabel(o,t,e)},e.prototype.createLabel=function(e,t,n){var r,i=document.createElement("div");if(i.textContent=e.toString(),i.setAttribute("type","button"),i.classList.add("ng-slider__value"),this.labels.append(i),t.isVertical){var o=100*((e-t.min)/(t.max-t.min)-i.offsetHeight/2/(t.endCord-t.startCord));i.style.top=o+"%"}else o=100*((e-t.min)/(t.max-t.min)-i.offsetWidth/2/(t.endCord-t.startCord)),i.style.left=o+"%";i.addEventListener("click",(function(){if(i.textContent){var e=parseFloat(i.textContent);t.key="progressBarFirst","true"===t.range?e>t.value2?t.value=e:e<t.value2&&(t.key="progressBarSecond",t.value2=e):t.value=e,n(t)}})),null===(r=this.values)||void 0===r||r.push(i)},e.prototype.destroy=function(){for(var e;this.labels.hasChildNodes();)null===(e=this.labels.firstChild)||void 0===e||e.remove(),this.values.pop()},Object.defineProperty(e.prototype,"getLabels",{get:function(){return this.labels},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"getValues",{get:function(){return this.values},enumerable:!1,configurable:!0}),e}();t.default=n},70:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){this.sliderHandle=document.createElement("div")}return e.prototype.setHandle=function(e,t,n){var r=this;document.ondragstart=function(){return!1},document.body.onselectstart=function(){return!1},this.sliderHandle.addEventListener("pointerdown",(function(){var i=function(r){t.key=n?"secondHandle":"firstHandle",t.isVertical?t.currentCord=r.pageY:t.currentCord=r.pageX,e(t)},o=function(){document.removeEventListener("pointermove",i),r.sliderHandle.removeEventListener("pointerup",o)};document.addEventListener("pointermove",i),document.addEventListener("pointerup",o)}))},Object.defineProperty(e.prototype,"getSliderHandle",{get:function(){return this.sliderHandle},enumerable:!1,configurable:!0}),e.prototype.moveHandle=function(e,t){var n=100*((t-e.min)/(e.max-e.min)-this.sliderHandle.offsetWidth/2/(e.endCord-e.startCord));e.isVertical?this.sliderHandle.style.top=n+"%":this.sliderHandle.style.left=n+"%"},e.prototype.hide=function(){this.sliderHandle.style.display="none"},e.prototype.show=function(){this.sliderHandle.style.display="block"},e}();t.default=n},334:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){this.sliderTrack=document.createElement("div")}return e.prototype.create=function(){this.sliderTrack.classList.add("ng-slider__slider-track")},e.prototype.fillWithColor=function(e){var t=this;switch(e.range){case"min":!function(e){var n=(e.value-e.min)/(e.max-e.min)*100;e.isVertical?(t.sliderTrack.style.top="0%",t.sliderTrack.style.height=n+"%"):(t.sliderTrack.style.left="0%",t.sliderTrack.style.width=n+"%")}(e);break;case"max":!function(e){var n=(e.max-e.value)/(e.max-e.min)*100,r=(e.value-e.min)/(e.max-e.min)*100;e.isVertical?(t.sliderTrack.style.top=r+"%",t.sliderTrack.style.height=n+"%"):(t.sliderTrack.style.left=r+"%",t.sliderTrack.style.width=n+"%")}(e);break;case"true":!function(e){var n=(e.value-e.value2)/(e.max-e.min)*100,r=(e.value2-e.min)/(e.max-e.min)*100;e.isVertical?(t.sliderTrack.style.top=r+"%",t.sliderTrack.style.height=n+"%"):(t.sliderTrack.style.left=r+"%",t.sliderTrack.style.width=n+"%")}(e);break;default:e.isVertical?t.sliderTrack.style.height="0%":t.sliderTrack.style.width="0%"}},e.prototype.hide=function(){this.sliderTrack.style.width="0"},Object.defineProperty(e.prototype,"getSliderTrack",{get:function(){return this.sliderTrack},enumerable:!1,configurable:!0}),e}();t.default=n},407:function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var s=o(n(334)),a=o(n(70)),l=o(n(942)),u=o(n(349)),c=function(e){function t(t){var n=e.call(this)||this;n.viewElements={labels:new l.default,sliderTrack:new s.default,firstHandle:new a.default,firstValue:new u.default,secondHandle:new a.default,secondValue:new u.default};var r=document.getElementById(t);if(!r)throw new Error("Wrong Id");return n.slider=r,n}return i(t,e),t.prototype.displaySlider=function(e){this.slider.append(this.viewElements.labels.getLabels),this.slider.append(this.viewElements.sliderTrack.getSliderTrack),this.slider.append(this.viewElements.firstHandle.getSliderHandle),this.viewElements.firstHandle.getSliderHandle.append(this.viewElements.firstValue.getCurrentValue),this.viewElements.labels.create(this.notifyObservers.bind(this),e),this.viewElements.sliderTrack.create(),this.viewElements.firstValue.getCurrentValue.classList.add("ng-slider__current-value"),this.viewElements.firstHandle.getSliderHandle.classList.add("ng-slider__handle"),"true"===e.range&&(this.slider.append(this.viewElements.secondHandle.getSliderHandle),this.viewElements.secondHandle.getSliderHandle.append(this.viewElements.secondValue.getCurrentValue),e.value2||(e.value2=e.min),this.viewElements.secondValue.getCurrentValue.classList.add("ng-slider__current-value"),this.viewElements.secondHandle.getSliderHandle.classList.add("ng-slider__handle"),this.viewElements.secondValue.getCurrentValue.textContent=e.value2.toString(),e.key="secondHandle",this.changeValue(e)),!1===e.isValueVisible?(this.viewElements.firstValue.hide(),this.viewElements.secondValue.hide()):(this.viewElements.firstValue.show(),this.viewElements.secondValue.show()),e.key="firstHandle",this.changeValue(e),this.viewElements.sliderTrack.fillWithColor(e)},t.prototype.destroySlider=function(){var e;for(this.viewElements.labels.destroy();this.slider.hasChildNodes();)null===(e=this.slider.firstChild)||void 0===e||e.remove()},t.prototype.setHandles=function(e){var t;this.viewElements.firstHandle.setHandle(this.notifyObservers.bind(this),e,!1),null===(t=this.viewElements.secondHandle)||void 0===t||t.setHandle(this.notifyObservers.bind(this),e,!0)},Object.defineProperty(t.prototype,"getViewElements",{get:function(){return this.viewElements},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"getSlider",{get:function(){return this.slider},enumerable:!1,configurable:!0}),t.prototype.changeValue=function(e){"secondHandle"===e.key||"progressBarSecond"===e.key?(this.viewElements.secondValue.setTextOfCurrentValue(e.value2.toString()),this.viewElements.secondHandle.moveHandle(e,e.value2)):(this.viewElements.firstValue.setTextOfCurrentValue(e.value.toString()),this.viewElements.firstHandle.moveHandle(e,e.value)),this.detachCurrentValues(e),"true"===e.range&&this.checkIfCurrentValuesIntersect(e)&&this.uniteCurrentValues(e)},t.prototype.uniteCurrentValues=function(e){this.viewElements.secondValue.hide(),this.viewElements.firstValue.getCurrentValue.textContent=e.value2+"-"+e.value},t.prototype.detachCurrentValues=function(e){this.viewElements.secondValue.show(),this.viewElements.firstValue.getCurrentValue.textContent=e.value.toString()},t.prototype.checkIfCurrentValuesIntersect=function(e){var t=this.viewElements.firstValue.getCurrentValue.getBoundingClientRect(),n=this.viewElements.secondValue.getCurrentValue.getBoundingClientRect();return!!(e.isVertical&&t.top<n.bottom||!e.isVertical&&t.left<n.right)},t.prototype.makeVertical=function(){this.viewElements.firstHandle.getSliderHandle.style.left="-5px",this.viewElements.secondHandle.getSliderHandle.style.left="-5px",this.viewElements.sliderTrack.getSliderTrack.style.width="5px",this.viewElements.sliderTrack.getSliderTrack.style.left="0",this.slider.classList.add("ng-slider_vertical"),this.viewElements.labels.getLabels.classList.add("ng-slider__values_vertical"),this.viewElements.firstValue.getCurrentValue.classList.add("ng-slider__current-value_vertical"),this.viewElements.secondValue.getCurrentValue.classList.add("ng-slider__current-value_vertical"),this.viewElements.sliderTrack.getSliderTrack.classList.add("ng-slider__slider-track_vertical"),this.viewElements.firstHandle.getSliderHandle.classList.add("ng-slider__handle_vertical"),this.viewElements.secondHandle.getSliderHandle.classList.add("ng-slider__handle_vertical")},t.prototype.makeHorizontal=function(){this.viewElements.firstHandle.getSliderHandle.style.top="-5px",this.viewElements.secondHandle.getSliderHandle.style.top="-5px",this.viewElements.sliderTrack.getSliderTrack.style.height="5px",this.viewElements.sliderTrack.getSliderTrack.style.top="0",this.slider.classList.remove("ng-slider_vertical"),this.viewElements.labels.getLabels.classList.remove("ng-slider__values_vertical"),this.viewElements.firstValue.getCurrentValue.classList.remove("ng-slider__current-value_vertical"),this.viewElements.secondValue.getCurrentValue.classList.remove("ng-slider__current-value_vertical"),this.viewElements.sliderTrack.getSliderTrack.classList.remove("ng-slider__slider-track_vertical"),this.viewElements.firstHandle.getSliderHandle.classList.remove("ng-slider__handle_vertical"),this.viewElements.secondHandle.getSliderHandle.classList.remove("ng-slider__handle_vertical")},t}(o(n(287)).default);t.default=c},349:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){this.currentValue=document.createElement("div")}return Object.defineProperty(e.prototype,"getCurrentValue",{get:function(){return this.currentValue},enumerable:!1,configurable:!0}),e.prototype.setTextOfCurrentValue=function(e){this.currentValue.textContent=e},e.prototype.hide=function(){this.currentValue.style.display="none"},e.prototype.show=function(){this.currentValue.style.display="block"},e}();t.default=n},366:function(e,t,n){"use strict";var r=n(638),i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=i(n(975)),s=i(n(650)),a=i(n(407));r.fn.ngSlider=function(e){var t=new s.default(e),n=new a.default(e.id),r=new o.default(n,t);return r.onInit(),r}}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var o=t[r]={id:r,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n(190)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,